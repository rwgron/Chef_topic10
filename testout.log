-----> Starting Kitchen (v1.3.1)
-----> Cleaning up any prior instances of <default-precise32>
-----> Destroying <default-precise32>...
       Vagrant instance <default-precise32> destroyed.
       Finished destroying <default-precise32> (0m3.99s).
-----> Testing <default-precise32>
-----> Creating <default-precise32>...
       ==> default: Forcing shutdown of VM...==> default: Destroying VM and associated drives...Bringing machine 'default' up with 'virtualbox' provider...==> default: Importing base box 'precise32'...[KProgress: 10%[KProgress: 30%[KProgress: 40%[KProgress: 50%[KProgress: 70%[KProgress: 80%[KProgress: 90%[K==> default: Matching MAC address for NAT networking...==> default: Setting the name of the VM: kitchen-task10-default-precise32_default_1429864408847_97902==> default: Clearing any previously set network interfaces...==> default: Preparing network interfaces based on configuration...    default: Adapter 1: nat==> default: Forwarding ports...    default: 22 => 2222 (adapter 1)==> default: Booting VM...==> default: Waiting for machine to boot. This may take a few minutes...    default: SSH address: 127.0.0.1:2222    default: SSH username: vagrant    default: SSH auth method: private key    default: Warning: Connection timeout. Retrying...    default: Warning: Connection timeout. Retrying...    default: 
           default: Vagrant insecure key detected. Vagrant will automatically replace
           default: 
           default: Removing insecure key from the guest if its present...    default: Key inserted! Disconnecting and reconnecting using new SSH key...==> default: Machine booted and ready!==> default: Checking for guest additions in VM...
           default: The guest additions on this VM do not match the installed version of
           default: VirtualBox! In most cases this is fine, but in rare cases it can
           default: prevent things such as shared folders from working properly. If you see
           default: shared folder errors, please make sure the guest additions within the
           default: virtual machine match the version of VirtualBox you have installed on
           default: your host and reload your VM.
           default: 
           default: Guest Additions Version: 4.2.0
       Vagrant instance <default-precise32> created.
       Finished creating <default-precise32> (1m29.02s).
-----> Converging <default-precise32>...
       Preparing files for transfer
       Preparing dna.json
       Resolving cookbook dependencies with Berkshelf 3.2.3...
       Removing non-cookbook files before transfer
       Preparing data_bags
       Preparing environments
       Preparing nodes
       Preparing roles
       Preparing solo.rb
       ==> default: Setting hostname...==> default: Machine not provisioning because `--no-provision` is specified.-----> Installing Chef Omnibus (install only if missing)
       downloading https://www.chef.io/chef/install.sh
         to file /tmp/install.sh
       trying wget...
       Downloading Chef  for ubuntu...
       downloading https://www.chef.io/chef/metadata?v=&prerelease=false&nightlies=false&p=ubuntu&pv=12.04&m=i686
         to file /tmp/install.sh.1224/metadata.txt
       trying wget...
       url	https://opscode-omnibus-packages.s3.amazonaws.com/ubuntu/12.04/i686/chef_12.2.1-1_i386.deb
       md5	0c7c11da89b66bae5542b90ad9201781
       sha256	a7f745835dc7f586dd7a5fb3d585ba39b2fe5e02e69a239eaaa77c18277c4624
       downloaded metadata file looks valid...
       downloading https://opscode-omnibus-packages.s3.amazonaws.com/ubuntu/12.04/i686/chef_12.2.1-1_i386.deb
         to file /tmp/install.sh.1224/chef_12.2.1-1_i386.deb
       trying wget...
       Comparing checksum with sha256sum...
       
       WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING
       
       You are installing an omnibus package without a version pin.  If you are installing
       on production servers via an automated process this is DANGEROUS and you will
       be upgraded without warning on new releases, even to new major release.
       Letting the version float is only appropriate in desktop, test, development or
       CI/CD environments.
       
       WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING
       
       Installing Chef 
       installing with dpkg...
       Selecting previously unselected package chef.
       (Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 29361 files and directories currently installed.)
       Unpacking chef (from .../chef_12.2.1-1_i386.deb) ...
       Setting up chef (12.2.1-1) ...
       Thank you for installing Chef!
       Transferring files to <default-precise32>
       Starting Chef Client, version 12.2.1
       Compiling Cookbooks...
       Converging 86 resources
       Recipe: apache2::default
         * apt_package[apache2] action install
           - install version 2.2.22-1ubuntu1 of package apache2
         * directory[/etc/apache2/sites-available] action create (up to date)
         * directory[/etc/apache2/sites-enabled] action create (up to date)
         * directory[/etc/apache2/mods-available] action create (up to date)
         * directory[/etc/apache2/mods-enabled] action create (up to date)
         * directory[/etc/apache2/conf-available] action create
           - create new directory /etc/apache2/conf-available
           - change mode from '' to '0755'
           - change owner from '' to 'root'
           - change group from '' to 'root'
         * directory[/etc/apache2/conf-enabled] action create
           - create new directory /etc/apache2/conf-enabled
           - change mode from '' to '0755'
           - change owner from '' to 'root'
           - change group from '' to 'root'
         * link[/etc/apache2/sites-enabled/default] action delete (up to date)
         * file[/etc/apache2/sites-available/default] action delete
           - delete file /etc/apache2/sites-available/default
         * link[/etc/apache2/sites-enabled/000-default] action delete
           - delete link at /etc/apache2/sites-enabled/000-default
         * file[/etc/apache2/sites-available/000-default] action delete (up to date)
         * directory[/etc/apache2/conf.d] action delete
           - delete existing directory /etc/apache2/conf.d
         * directory[/var/log/apache2] action create
           - change mode from '0750' to '0755'
         * apt_package[perl] action install (up to date)
         * link[/usr/sbin/a2ensite] action delete
           - delete link at /usr/sbin/a2ensite
         * template[/usr/sbin/a2ensite] action create
           - create new file /usr/sbin/a2ensite
           - update content in file /usr/sbin/a2ensite from none to ce53f4
           --- /usr/sbin/a2ensite	2015-04-24 08:38:15.928745358 +0000
           +++ /tmp/chef-rendered-template20150424-1339-1siwkkh	2015-04-24 08:38:15.928745358 +0000
           @@ -1 +1,533 @@
       +#!/usr/bin/perl -w
       
           +# a2enmod by Stefan Fritsch <sf@debian.org>
           +# Licensed under Apache License 2.0
           +#
           +# The coding style is "perltidy -pbp"
           +
           +use strict;
           +use Cwd 'realpath';
       +use File::Spec;
           +use File::Basename;
           +use File::Path;
           +use Getopt::Long;
           +
           +my $quiet;
           +my $force;
           +my $maintmode;
       +my $purge;
           +
           +Getopt::Long::Configure('bundling');
       +GetOptions(
           +    'quiet|q'     => \$quiet,
           +    'force|f'     => \$force,
           +    'maintmode|m' => \$maintmode,
           +    'purge|p'     => \$purge
           +) or exit 2;
           +
       
           +$basename =~ /^a2(en|dis)(mod|site|conf)((?:-.+)?)$/
           +    or die "$basename call name unknown\n";
           +my $act        = $1;
           +my $obj        = $2;
           +my $dir_suffix = $3;
           +
           +my $env_file = $ENV{APACHE_ENVVARS}
           +    || (
           +    $ENV{APACHE_CONFDIR}
           +    ? "$ENV{APACHE_CONFDIR}/envvars"
           +    : "/etc/apache2$dir_suffix/envvars"
           +    );
           +$ENV{LANG} = 'C';
           +read_env_file($env_file);
           +
           +$act .= 'able';
           +my ( $name, $dir, $sffx, $reload );
           +if ( $obj eq 'mod' ) {
           +    $obj    = 'module';
           +    $dir    = 'mods';
           +    $sffx   = '.load';
           +    $reload = 'restart';
           +}
           +elsif ( $obj eq 'conf' ) {
           +    $obj    = 'conf';
           +    $dir    = 'conf';
           +    $sffx   = '.conf';
           +    $reload = 'reload';
       +}
       +else {
           +    $dir    = 'sites';
           +    $sffx   = '.conf';
       
           +}
       +$name = ucfirst($obj);
       
           +my $confdir = $ENV{APACHE_CONFDIR} || "/etc/apache2$dir_suffix";
           +my $availdir = $ENV{ uc("APACHE_${dir}_AVAILABLE") }
           +    || "$confdir/$dir-available";
           +my $enabldir = $ENV{ uc("APACHE_${dir}_ENABLED") } || "$confdir/$dir-enabled";
           +my $statedir = $ENV{ uc("APACHE_STATE_DIRECTORY") } || "/usr/lib/apache2";
           +
           +$statedir .= "/$obj";
           +
           +my $choicedir = $act eq 'enable' ? $availdir : $enabldir;
           +my $linkdir = File::Spec->abs2rel( $availdir, $enabldir );
           +
           +my $request_reload = 0;
           +
           +my $rc = 0;
           +
           +if ( !scalar @ARGV ) {
           +    my @choices = myglob('*');
           +    print "Your choices are: @choices\n";
           +    print "Which ${obj}(s) do you want to $act (wildcards ok)?\n";
           +    my $input = <>;
           +    @ARGV = split /\s+/, $input;
           +
           +}
           +
           +my @objs;
           +foreach my $arg (@ARGV) {
           +    $arg =~ s/${sffx}$//;
           +    my @glob = myglob($arg);
           +    if ( !@glob ) {
           +        error("No $obj found matching $arg!\n");
           +        $rc = 1;
           +    }
           +    else {
           +        push @objs, @glob;
           +    }
           +}
           +
           +foreach my $acton (@objs) {
           +    doit($acton) or $rc = 1;
           +}
           +
           +info(
           +    "To activate the new configuration, you need to run:\n  service apache2 $reload\n"
           +) if $request_reload;
           +
           +exit($rc);
           +
           +##############################################################################
           +
           +sub myglob {
           +    my $arg = shift;
           +
           +    my @glob = map {
           +        s{^$choicedir/}{};
           +        s{$sffx$}{};
           +        $_
           +    } glob("$choicedir/$arg$sffx");
           +
           +    return @glob;
           +}
           +
           +sub doit {
           +    my $acton = shift;
           +
           +    my ( $conftgt, $conflink );
           +    if ( $obj eq 'module' ) {
           +        if ( $acton eq 'cgi' && threaded() ) {
           +            print
           +                "Your MPM seems to be threaded. Selecting cgid instead of cgi.\n";
           +            $acton = 'cgid';
           +        }
           +
           +        $conftgt = "$availdir/$acton.conf";
           +        if ( -e $conftgt ) {
           +            $conflink = "$enabldir/$acton.conf";
           +        }
           +    }
           +
           +    my $tgt  = "$availdir/$acton$sffx";
           +    my $link = "$enabldir/$acton$sffx";
           +
           +    if ( !-e $tgt ) {
           +        if ( -l $link && !-e $link ) {
           +            if ( $act eq 'disable' ) {
           +                info("removing dangling symlink $link\n");
           +                unlink($link);
           +
           +                # force a .conf path. It may exist as dangling link, too
           +                $conflink = "$enabldir/$acton.conf";
           +
           +                if ( -l $conflink && !-e $conflink ) {
           +                    info("removing dangling symlink $conflink\n");
           +                    unlink($conflink);
           +                }
           +
           +                return 1;
           +            }
           +            else {
           +                error("$link is a dangling symlink!\n");
           +            }
           +        }
           +
           +        if ( $purge ) {
           +            switch_marker( $obj, $act, $acton );
           +            # exit silently, we are purging anyway
           +            return 1;
           +        }
           +
           +        error("$name $acton does not exist!\n");
           +        return 0;
           +    }
           +
           +    # handle module dependencies
           +    if ( $obj eq 'module' ) {
           +        if ( $act eq 'enable' ) {
           +            if ( $acton eq 'mpm_itk' ) {
           +                warning(  "MPM_ITK is a third party module that is not part "
           +                        . "of the official Apache HTTPD. It has seen less "
           +                        . "testing than the official MPM modules." );
           +            }
           +            my @depends = get_deps("$availdir/$acton.load");
           +            do_deps( $acton, @depends ) or return 0;
           +
           +            my @conflicts = get_deps( "$availdir/$acton.load", "Conflicts" );
           +            check_conflicts( $acton, @conflicts ) or return 0;
           +        }
           +        else {
           +            my @depending;
           +            foreach my $d ( glob("$enabldir/*.load") ) {
           +                my @deps = get_deps($d);
           +                if ( is_in( $acton, @deps ) ) {
           +                    $d =~ m,/([^/]+).load$,;
           +                    push @depending, $1;
           +                }
           +            }
           +            if ( scalar @depending ) {
           +                if ($force) {
           +                    do_deps( $acton, @depending ) or return 0;
           +                }
           +                else {
           +                    error(
           +                        "The following modules depend on $acton ",
           +                        "and need to be disabled first: @depending\n"
           +                    );
           +                    return 0;
           +                }
           +            }
           +        }
           +    }
           +    elsif ( $act eq 'enable' ) {
           +        my @depends = get_deps("$availdir/$acton$sffx");
           +        warn_deps( $acton, @depends ) or return 0;
           +    }
           +
           +    if ( $act eq 'enable' ) {
           +        my $check = check_link( $tgt, $link );
           +        if ( $check eq 'ok' ) {
           +            if ($conflink) {
           +
           +                # handle .conf file
           +                my $confcheck = check_link( $conftgt, $conflink );
           +                if ( $confcheck eq 'ok' ) {
           +                    info("$name $acton already enabled\n");
           +                    return 1;
           +                }
           +                elsif ( $confcheck eq 'missing' ) {
           +                    print "Enabling config file $acton.conf.\n";
           +                    add_link( $conftgt, $conflink ) or return 0;
           +                }
           +                else {
           +                    error(
           +                        "Config file $acton.conf not properly enabled: $confcheck\n"
           +                    );
           +                    return 0;
           +                }
           +            }
           +            else {
           +                info("$name $acton already enabled\n");
           +                return 1;
           +            }
           +        }
           +        elsif ( $check eq 'missing' ) {
           +            if ($conflink) {
           +
           +                # handle .conf file
           +                my $confcheck = check_link( $conftgt, $conflink );
           +                if ( $confcheck eq 'missing' ) {
           +                    add_link( $conftgt, $conflink ) or return 0;
           +                }
           +                elsif ( $confcheck ne 'ok' ) {
           +                    error(
           +                        "Config file $acton.conf not properly enabled: $confcheck\n"
           +                    );
           +                    return 0;
           +                }
           +            }
           +
           +            print "Enabling $obj $acton.\n";
           +            if ( $acton eq 'ssl' ) {
           +                info(     "See /usr/share/doc/apache2/README.Debian.gz on "
           +                        . "how to configure SSL and create self-signed certificates.\n"
           +                );
           +            }
           +            return add_link( $tgt, $link )
           +                && switch_marker( $obj, $act, $acton );
           +        }
           +        else {
           +            error("$name $acton not properly enabled: $check\n");
           +            return 0;
           +        }
           +    }
           +    else {
           +        if ( -e $link || -l $link ) {
           +            remove_link($link);
           +            if ( $conflink && -e $conflink ) {
           +                remove_link($conflink);
           +            }
           +            switch_marker( $obj, $act, $acton );
           +            print "$name $acton disabled.\n";
           +        }
           +        elsif ( $conflink && -e $conflink ) {
           +            print "Disabling stale config file $acton.conf.\n";
           +            remove_link($conflink);
           +        }
           +        else {
           +            info("$name $acton already disabled\n");
           +            if ( $purge ) {
           +                switch_marker( $obj, $act, $acton );
           +            }
           +            return 1;
           +        }
           +    }
           +
           +    return 1;
           +}
           +
           +sub get_deps {
           +    my $file = shift;
           +    my $type = shift || "Depends";
           +
           +    my $fd;
           +    if ( !open( $fd, '<', $file ) ) {
           +        error("Can't open $file: $!");
           +        return;
           +    }
           +    my $line;
           +    while ( defined( $line = <$fd> ) ) {
           +        chomp $line;
           +        if ( $line =~ /^# $type:\s+(.*?)\s*$/ ) {
       +            my $deps = $1;
       +            return split( /[\n\s]+/, $deps );
       
       
           +        # only check until the first non-empty non-comment line
           +        last if ( $line !~ /^\s*(?:#.*)?$/ );
           +    }
           +    return;
           +}
           +
           +sub do_deps {
           +    my $acton = shift;
           +    foreach my $d (@_) {
       +        info("Considering dependency $d for $acton:\n");
       +        if ( !doit($d) ) {
           +            error("Could not $act dependency $d for $acton, aborting\n");
       +            return 0;
       
           +    }
           +    return 1;
           +}
           +
           +sub warn_deps {
           +    my $acton = shift;
           +    my $modsenabldir = $ENV{APACHE_MODS_ENABLED} || "$confdir/mods-enabled";
           +    foreach my $d (@_) {
           +        info("Checking dependency $d for $acton:\n");
       +        if ( !-e "$modsenabldir/$d.load" ) {
           +            warning(
           +                "Module $d is not enabled, but $acton depends on it, aborting\n"
           +            );
           +            return 0;
           +        }
           +    }
           +    return 1;
           +}
           +
           +sub check_conflicts {
           +    my $acton    = shift;
           +    my $haderror = 0;
           +    foreach my $d (@_) {
           +        info("Considering conflict $d for $acton:\n");
           +
           +        my $tgt  = "$availdir/$d$sffx";
           +        my $link = "$enabldir/$d$sffx";
           +
           +        my $confcheck = check_link( $tgt, $link );
           +        if ( $confcheck eq 'ok' ) {
           +            error(
           +                "Module $d is enabled - cannot proceed due to conflicts. It needs to be disabled first!\n"
       
           +
           +            # Don't return immediately, there could be several conflicts
           +            $haderror++;
           +        }
           +    }
           +
           +    if ($haderror) {
           +        return 0;
           +    }
           +
           +    return 1;
           +}
           +
           +sub add_link {
           +    my ( $tgt, $link ) = @_;
           +
           +    # create relative link
           +    if ( !symlink( File::Spec->abs2rel( $tgt, dirname($link) ), $link ) ) {
           +        die("Could not create $link: $!\n");
           +    }
           +    $request_reload = 1;
           +    return 1;
           +}
           +
           +sub check_link {
           +    my ( $tgt, $link ) = @_;
           +
           +    if ( !-e $link ) {
           +        if ( -l $link ) {
           +
           +            # points to nowhere
           +            info("Removing dangling link $link");
           +            unlink($link) or die "Could not remove $link\n";
           +        }
           +        return 'missing';
           +    }
           +
           +    if ( -e $link && !-l $link ) {
           +        return "$link is a real file, not touching it";
           +    }
           +    if ( realpath($link) ne realpath($tgt) ) {
           +        return "$link exists but does not point to $tgt, not touching it";
           +    }
           +    return 'ok';
           +}
           +
           +sub remove_link {
           +    my ($link) = @_;
           +
           +    if ( -l $link ) {
           +        unlink($link) or die "Could not remove $link: $!\n";
           +    }
           +    elsif ( -e $link ) {
           +        error("$link is not a symbolic link, not deleting\n");
           +        return 0;
           +    }
           +    $request_reload = 1;
           +    return 1;
           +}
           +
           +sub threaded {
           +    my $result = "";
           +    $result = qx{/usr/sbin/apache2ctl -V | grep 'threaded'}
           +        if -x '/usr/sbin/apache2ctl';
           +    if ( $? != 0 ) {
           +
           +        # config doesn't work
           +        if ( -e "$enabldir/mpm_prefork.load" || -e "$enabldir/mpm_itk.load" )
           +        {
           +            return 0;
           +        }
           +        elsif (-e "$enabldir/mpm_worker.load"
           +            || -e "$enabldir/mpm_event.load" )
           +        {
           +            return 1;
           +        }
           +        else {
           +            error("Can't determine enabled MPM");
           +
           +            # do what user requested
           +            return 0;
           +        }
           +    }
           +    if ( $result =~ / no/ ) {
           +        return 0;
           +    }
           +    elsif ( $result =~ / yes/ ) {
           +        return 1;
           +    }
           +    else {
           +        die("Can't parse output from apache2ctl -V:\n$result\n");
           +    }
           +}
           +
           +sub info {
           +    print @_ if !$quiet;
           +}
           +
           +sub error {
           +    print STDERR 'ERROR: ', @_;
       
           +
           +sub warning {
           +    print STDERR 'WARNING: ', @_;
           +}
           +
           +sub is_in {
           +    my $needle = shift;
           +    foreach my $e (@_) {
           +        return 1 if $needle eq $e;
           +    }
           +    return 0;
           +}
           +
           +sub read_env_file {
           +    my $file = shift;
           +
           +    -r $file or return;
           +    my @lines = qx{env - sh -c '. $file && env'};
           +    if ($?) {
           +        die "Could not read $file\n";
           +    }
           +
           +    foreach my $l (@lines) {
           +        chomp $l;
           +        $l =~ /^(.*)?=(.*)$/ or die "Could not parse $file\n";
           +        $ENV{$1} = $2;
           +    }
           +}
           +
           +sub switch_marker {
           +    die('usage: switch_marker([module|site|conf], [enable|disable], $name)')
           +        if @_ != 3;
           +    my $which = shift;
           +    my $what  = shift;
           +    my $name  = shift;
           +
       
           +    $mode = "maint" if $maintmode;
           +
           +    #print("switch_marker $which $what $name\n");
           +    # TODO: get rid of the magic string(s)
           +    my $state_marker_dir = "$statedir/$what" . "d" . "_by_$mode";
           +    my $state_marker     = "$state_marker_dir/$name";
           +    if ( !-d $state_marker_dir ) {
           +        File::Path::mkpath("$state_marker_dir")
           +            || error(
           +            "Failed to create marker directory: '$state_marker_dir'\n");
           +    }
           +
           +    # XXX: swap find with perl alternative
           +    my @markers = qx{find "$statedir" -type f -a -name "$name"};
           +    chomp(@markers);
           +    foreach (@markers) {
           +        unless ( unlink $_ ) {
           +            error("Failed to remove old marker '$_'!\n") && return 0;
           +        }
           +    }
           +    unless ($purge) {
           +        qx{touch "$state_marker"};
           +        if ( $? != 0 ) {
           +            error("Failed to create marker '$state_marker'!\n") && return 0;
           +        }
           +        return 1;
           +    }
           +}
           +
       +# vim: syntax=perl sw=4 sts=4 sr et
           - change mode from '' to '0700'
           - change owner from '' to 'root'
           - change group from '' to 'root'
         * link[/usr/sbin/a2dissite] action delete
           - delete link at /usr/sbin/a2dissite
         * template[/usr/sbin/a2dissite] action create
           - create new file /usr/sbin/a2dissite
           - update content in file /usr/sbin/a2dissite from none to ce53f4
           --- /usr/sbin/a2dissite	2015-04-24 08:38:17.164729822 +0000
           +++ /tmp/chef-rendered-template20150424-1339-igqflu	2015-04-24 08:38:17.164729822 +0000
           @@ -1 +1,533 @@
           +#!/usr/bin/perl -w
           +#
           +# a2enmod by Stefan Fritsch <sf@debian.org>
           +# Licensed under Apache License 2.0
           +#
           +# The coding style is "perltidy -pbp"
           +
           +use strict;
           +use Cwd 'realpath';
           +use File::Spec;
           +use File::Basename;
           +use File::Path;
           +use Getopt::Long;
           +
           +my $quiet;
           +my $force;
           +my $maintmode;
           +my $purge;
           +
           +Getopt::Long::Configure('bundling');
           +GetOptions(
           +    'quiet|q'     => \$quiet,
           +    'force|f'     => \$force,
           +    'maintmode|m' => \$maintmode,
           +    'purge|p'     => \$purge
           +) or exit 2;
           +
           +my $basename = basename($0);
           +$basename =~ /^a2(en|dis)(mod|site|conf)((?:-.+)?)$/
           +    or die "$basename call name unknown\n";
           +my $act        = $1;
           +my $obj        = $2;
           +my $dir_suffix = $3;
           +
           +my $env_file = $ENV{APACHE_ENVVARS}
           +    || (
           +    $ENV{APACHE_CONFDIR}
           +    ? "$ENV{APACHE_CONFDIR}/envvars"
           +    : "/etc/apache2$dir_suffix/envvars"
           +    );
           +$ENV{LANG} = 'C';
           +read_env_file($env_file);
           +
           +$act .= 'able';
           +my ( $name, $dir, $sffx, $reload );
           +if ( $obj eq 'mod' ) {
           +    $obj    = 'module';
           +    $dir    = 'mods';
           +    $sffx   = '.load';
           +    $reload = 'restart';
           +}
           +elsif ( $obj eq 'conf' ) {
           +    $obj    = 'conf';
           +    $dir    = 'conf';
           +    $sffx   = '.conf';
           +    $reload = 'reload';
           +}
           +else {
           +    $dir    = 'sites';
           +    $sffx   = '.conf';
           +    $reload = 'reload';
           +}
           +$name = ucfirst($obj);
           +
           +my $confdir = $ENV{APACHE_CONFDIR} || "/etc/apache2$dir_suffix";
           +my $availdir = $ENV{ uc("APACHE_${dir}_AVAILABLE") }
           +    || "$confdir/$dir-available";
           +my $enabldir = $ENV{ uc("APACHE_${dir}_ENABLED") } || "$confdir/$dir-enabled";
           +my $statedir = $ENV{ uc("APACHE_STATE_DIRECTORY") } || "/usr/lib/apache2";
           +
           +$statedir .= "/$obj";
           +
           +my $choicedir = $act eq 'enable' ? $availdir : $enabldir;
           +my $linkdir = File::Spec->abs2rel( $availdir, $enabldir );
           +
           +my $request_reload = 0;
           +
           +my $rc = 0;
           +
           +if ( !scalar @ARGV ) {
           +    my @choices = myglob('*');
           +    print "Your choices are: @choices\n";
           +    print "Which ${obj}(s) do you want to $act (wildcards ok)?\n";
           +    my $input = <>;
           +    @ARGV = split /\s+/, $input;
           +
           +}
           +
           +my @objs;
           +foreach my $arg (@ARGV) {
           +    $arg =~ s/${sffx}$//;
           +    my @glob = myglob($arg);
           +    if ( !@glob ) {
           +        error("No $obj found matching $arg!\n");
           +        $rc = 1;
           +    }
           +    else {
           +        push @objs, @glob;
           +    }
           +}
           +
           +foreach my $acton (@objs) {
           +    doit($acton) or $rc = 1;
           +}
           +
           +info(
           +    "To activate the new configuration, you need to run:\n  service apache2 $reload\n"
           +) if $request_reload;
           +
           +exit($rc);
           +
           +##############################################################################
           +
           +sub myglob {
           +    my $arg = shift;
           +
           +    my @glob = map {
           +        s{^$choicedir/}{};
           +        s{$sffx$}{};
           +        $_
           +    } glob("$choicedir/$arg$sffx");
           +
           +    return @glob;
           +}
           +
           +sub doit {
           +    my $acton = shift;
           +
           +    my ( $conftgt, $conflink );
           +    if ( $obj eq 'module' ) {
           +        if ( $acton eq 'cgi' && threaded() ) {
           +            print
           +                "Your MPM seems to be threaded. Selecting cgid instead of cgi.\n";
           +            $acton = 'cgid';
           +        }
           +
           +        $conftgt = "$availdir/$acton.conf";
           +        if ( -e $conftgt ) {
           +            $conflink = "$enabldir/$acton.conf";
           +        }
           +    }
           +
           +    my $tgt  = "$availdir/$acton$sffx";
           +    my $link = "$enabldir/$acton$sffx";
           +
           +    if ( !-e $tgt ) {
           +        if ( -l $link && !-e $link ) {
           +            if ( $act eq 'disable' ) {
           +                info("removing dangling symlink $link\n");
           +                unlink($link);
           +
        .conf path. It may exist as dangling link, too
           +                $conflink = "$enabldir/$acton.conf";
           +
           +                if ( -l $conflink && !-e $conflink ) {
           +                    info("removing dangling symlink $conflink\n");
           +                    unlink($conflink);
           +                }
           +
           +                return 1;
           +            }
           +            else {
           +                error("$link is a dangling symlink!\n");
           +            }
           +        }
           +
           +        if ( $purge ) {
           +            switch_marker( $obj, $act, $acton );
           +            # exit silently, we are purging anyway
           +            return 1;
           +        }
           +
           +        error("$name $acton does not exist!\n");
           +        return 0;
           +    }
           +
           +    # handle module dependencies
           +    if ( $obj eq 'module' ) {
           +        if ( $act eq 'enable' ) {
           +            if ( $acton eq 'mpm_itk' ) {
           +                warning(  "MPM_ITK is a third party module that is not part "
           +                        . "of the official Apache HTTPD. It has seen less "
           +                        . "testing than the official MPM modules." );
           +            }
           +            my @depends = get_deps("$availdir/$acton.load");
           +            do_deps( $acton, @depends ) or return 0;
           +
           +            my @conflicts = get_deps( "$availdir/$acton.load", "Conflicts" );
           +            check_conflicts( $acton, @conflicts ) or return 0;
           +        }
           +        else {
           +            my @depending;
           +            foreach my $d ( glob("$enabldir/*.load") ) {
           +                my @deps = get_deps($d);
           +                if ( is_in( $acton, @deps ) ) {
           +                    $d =~ m,/([^/]+).load$,;
           +                    push @depending, $1;
           +                }
           +            }
           +            if ( scalar @depending ) {
           +                if ($force) {
           +                    do_deps( $acton, @depending ) or return 0;
           +                }
           +                else {
           +                    error(
           +                        "The following modules depend on $acton ",
           +                        "and need to be disabled first: @depending\n"
       +                    );
           +                    return 0;
           +                }
           +            }
           +        }
           +    }
           +    elsif ( $act eq 'enable' ) {
           +        my @depends = get_deps("$availdir/$acton$sffx");
           +        warn_deps( $acton, @depends ) or return 0;
           +    }
           +
           +    if ( $act eq 'enable' ) {
           +        my $check = check_link( $tgt, $link );
           +        if ( $check eq 'ok' ) {
           +            if ($conflink) {
           +
           +                # handle .conf file
           +                my $confcheck = check_link( $conftgt, $conflink );
       
       +                    info("$name $acton already enabled\n");
           +                    return 1;
           +                }
           +                elsif ( $confcheck eq 'missing' ) {
           +                    print "Enabling config file $acton.conf.\n";
           +                    add_link( $conftgt, $conflink ) or return 0;
           +                }
           +                else {
           +                    error(
           +                        "Config file $acton.conf not properly enabled: $confcheck\n"
           +                    );
           +                    return 0;
           +                }
           +            }
           +            else {
           +                info("$name $acton already enabled\n");
           +                return 1;
           +            }
           +        }
           +        elsif ( $check eq 'missing' ) {
           +            if ($conflink) {
           +
           +                # handle .conf file
           +                my $confcheck = check_link( $conftgt, $conflink );
           +                if ( $confcheck eq 'missing' ) {
           +                    add_link( $conftgt, $conflink ) or return 0;
           +                }
           +                elsif ( $confcheck ne 'ok' ) {
           +                    error(
           +                        "Config file $acton.conf not properly enabled: $confcheck\n"
           +                    );
           +                    return 0;
           +                }
           +            }
           +
           +            print "Enabling $obj $acton.\n";
           +            if ( $acton eq 'ssl' ) {
           +                info(     "See /usr/share/doc/apache2/README.Debian.gz on "
           +                        . "how to configure SSL and create self-signed certificates.\n"
           +                );
           +            }
           +            return add_link( $tgt, $link )
           +                && switch_marker( $obj, $act, $acton );
           +        }
           +        else {
           +            error("$name $acton not properly enabled: $check\n");
           +            return 0;
           +        }
           +    }
           +    else {
           +        if ( -e $link || -l $link ) {
           +            remove_link($link);
           +            if ( $conflink && -e $conflink ) {
           +                remove_link($conflink);
           +            }
           +            switch_marker( $obj, $act, $acton );
           +            print "$name $acton disabled.\n";
           +        }
           +        elsif ( $conflink && -e $conflink ) {
           +            print "Disabling stale config file $acton.conf.\n";
           +            remove_link($conflink);
           +        }
           +        else {
           +            info("$name $acton already disabled\n");
           +            if ( $purge ) {
           +                switch_marker( $obj, $act, $acton );
           +            }
           +            return 1;
           +        }
           +    }
           +
           +    return 1;
           +}
           +
           +sub get_deps {
           +    my $file = shift;
           +    my $type = shift || "Depends";
           +
           +    my $fd;
           +    if ( !open( $fd, '<', $file ) ) {
           +        error("Can't open $file: $!");
           +        return;
           +    }
           +    my $line;
           +    while ( defined( $line = <$fd> ) ) {
           +        chomp $line;
           +        if ( $line =~ /^# $type:\s+(.*?)\s*$/ ) {
           +            my $deps = $1;
           +            return split( /[\n\s]+/, $deps );
           +        }
           +
           +        # only check until the first non-empty non-comment line
           +        last if ( $line !~ /^\s*(?:#.*)?$/ );
           +    }
           +    return;
           +}
           +
           +sub do_deps {
           +    my $acton = shift;
           +    foreach my $d (@_) {
           +        info("Considering dependency $d for $acton:\n");
           +        if ( !doit($d) ) {
           +            error("Could not $act dependency $d for $acton, aborting\n");
           +            return 0;
           +        }
           +    }
           +    return 1;
           +}
           +
           +sub warn_deps {
           +    my $acton = shift;
           +    my $modsenabldir = $ENV{APACHE_MODS_ENABLED} || "$confdir/mods-enabled";
           +    foreach my $d (@_) {
           +        info("Checking dependency $d for $acton:\n");
           +        if ( !-e "$modsenabldir/$d.load" ) {
           +            warning(
           +                "Module $d is not enabled, but $acton depends on it, aborting\n"
        +            );
           +            return 0;
           +        }
           +    }
           +    return 1;
           +}
           +
           +sub check_conflicts {
           +    my $acton    = shift;
           +    my $haderror = 0;
           +    foreach my $d (@_) {
           +        info("Considering conflict $d for $acton:\n");
           +
           +        my $tgt  = "$availdir/$d$sffx";
           +        my $link = "$enabldir/$d$sffx";
           +
           +        my $confcheck = check_link( $tgt, $link );
           +        if ( $confcheck eq 'ok' ) {
           +            error(
           +                "Module $d is enabled - cannot proceed due to conflicts. It needs to be disabled first!\n"
           +            );
           +
           +            # Don't return immediately, there could be several conflicts
           +            $haderror++;
           +        }
           +    }
           +
           +    if ($haderror) {
           +        return 0;
           +    }
           +
           +    return 1;
           +}
           +
           +sub add_link {
           +    my ( $tgt, $link ) = @_;
           +
           +    # create relative link
           +    if ( !symlink( File::Spec->abs2rel( $tgt, dirname($link) ), $link ) ) {
           +        die("Could not create $link: $!\n");
           +    }
           +    $request_reload = 1;
           +    return 1;
           +}
           +
           +sub check_link {
           +    my ( $tgt, $link ) = @_;
           +
           +    if ( !-e $link ) {
           +        if ( -l $link ) {
           +
           +            # points to nowhere
           +            info("Removing dangling link $link");
           +            unlink($link) or die "Could not remove $link\n";
           +        }
           +        return 'missing';
           +    }
           +
           +    if ( -e $link && !-l $link ) {
           +        return "$link is a real file, not touching it";
           +    }
           +    if ( realpath($link) ne realpath($tgt) ) {
           +        return "$link exists but does not point to $tgt, not touching it";
           +    }
           +    return 'ok';
           +}
           +
           +sub remove_link {
           +    my ($link) = @_;
           +
           +    if ( -l $link ) {
           +        unlink($link) or die "Could not remove $link: $!\n";
           +    }
           +    elsif ( -e $link ) {
           +        error("$link is not a symbolic link, not deleting\n");
           +        return 0;
           +    }
           +    $request_reload = 1;
       +    return 1;
           +}
           +
           +sub threaded {
           +    my $result = "";
           +    $result = qx{/usr/sbin/apache2ctl -V | grep 'threaded'}
           +        if -x '/usr/sbin/apache2ctl';
           +    if ( $? != 0 ) {
           +
           +        # config doesn't work
           +        if ( -e "$enabldir/mpm_prefork.load" || -e "$enabldir/mpm_itk.load" )
           +        {
           +            return 0;
           +        }
           +        elsif (-e "$enabldir/mpm_worker.load"
           +            || -e "$enabldir/mpm_event.load" )
           +        {
           +            return 1;
           +        }
           +        else {
           +            error("Can't determine enabled MPM");
       
           +            # do what user requested
           +            return 0;
           +        }
           +    }
           +    if ( $result =~ / no/ ) {
           +        return 0;
       
       +    elsif ( $result =~ / yes/ ) {
           +        return 1;
           +    }
           +    else {
           +        die("Can't parse output from apache2ctl -V:\n$result\n");
       +    }
           +}
           +
           +sub info {
           +    print @_ if !$quiet;
           +}
           +
           +sub error {
           +    print STDERR 'ERROR: ', @_;
           +}
           +
           +sub warning {
           +    print STDERR 'WARNING: ', @_;
           +}
           +
           +sub is_in {
           +    my $needle = shift;
           +    foreach my $e (@_) {
           +        return 1 if $needle eq $e;
           +    }
           +    return 0;
           +}
           +
           +sub read_env_file {
           +    my $file = shift;
           +
           +    -r $file or return;
           +    my @lines = qx{env - sh -c '. $file && env'};
           +    if ($?) {
           +        die "Could not read $file\n";
           +    }
           +
           +    foreach my $l (@lines) {
           +        chomp $l;
           +        $l =~ /^(.*)?=(.*)$/ or die "Could not parse $file\n";
           +        $ENV{$1} = $2;
           +    }
           +}
           +
           +sub switch_marker {
           +    die('usage: switch_marker([module|site|conf], [enable|disable], $name)')
           +        if @_ != 3;
           +    my $which = shift;
           +    my $what  = shift;
           +    my $name  = shift;
           +
           +    my $mode = "admin";
           +    $mode = "maint" if $maintmode;
           +
           +    #print("switch_marker $which $what $name\n");
           +    # TODO: get rid of the magic string(s)
           +    my $state_marker_dir = "$statedir/$what" . "d" . "_by_$mode";
           +    my $state_marker     = "$state_marker_dir/$name";
           +    if ( !-d $state_marker_dir ) {
           +        File::Path::mkpath("$state_marker_dir")
           +            || error(
           +            "Failed to create marker directory: '$state_marker_dir'\n");
           +    }
           +
           +    # XXX: swap find with perl alternative
           +    my @markers = qx{find "$statedir" -type f -a -name "$name"};
           +    chomp(@markers);
           +    foreach (@markers) {
           +        unless ( unlink $_ ) {
           +            error("Failed to remove old marker '$_'!\n") && return 0;
           +        }
           +    }
           +    unless ($purge) {
           +        qx{touch "$state_marker"};
           +        if ( $? != 0 ) {
           +            error("Failed to create marker '$state_marker'!\n") && return 0;
           +        }
           +        return 1;
           +    }
           +}
           +
           +# vim: syntax=perl sw=4 sts=4 sr et
           - change mode from '' to '0700'
           - change owner from '' to 'root'
           - change group from '' to 'root'
         * link[/usr/sbin/a2enmod] action delete (skipped due to only_if)
         * template[/usr/sbin/a2enmod] action create
           - update content in file /usr/sbin/a2enmod from 549dfe to ce53f4
           --- /usr/sbin/a2enmod	2012-02-07 04:16:57.000000000 +0000
           +++ /tmp/chef-rendered-template20150424-1339-1lc8emr	2015-04-24 08:38:17.556724892 +0000
           @@ -2,23 +2,31 @@
            #
            # a2enmod by Stefan Fritsch <sf@debian.org>
        # Licensed under Apache License 2.0
           +#
           +# The coding style is "perltidy -pbp"
       
            use strict;
            use Cwd 'realpath';
            use File::Spec;
            use File::Basename;
           +use File::Path;
            use Getopt::Long;
        
            my $quiet;
            my $force;
           +my $maintmode;
           +my $purge;
           +
            Getopt::Long::Configure('bundling');
            GetOptions(
           -    'quiet|q' => \$quiet,
           -    'force|f' => \$force
           +    'quiet|q'     => \$quiet,
           +    'force|f'     => \$force,
           +    'maintmode|m' => \$maintmode,
           +    'purge|p'     => \$purge
            ) or exit 2;
            
            my $basename = basename($0);
           -$basename =~ /^a2(en|dis)(mod|site)((?:-.+)?)$/
           +$basename =~ /^a2(en|dis)(mod|site|conf)((?:-.+)?)$/
         or die "$basename call name unknown\n";
            my $act        = $1;
            my $obj        = $2;
           @@ -30,7 +38,7 @@
         ? "$ENV{APACHE_CONFDIR}/envvars"
         : "/etc/apache2$dir_suffix/envvars"
         );
           -$ENV{LANG}='C';
           +$ENV{LANG} = 'C';
            read_env_file($env_file);
            
            $act .= 'able';
           @@ -41,17 +49,27 @@
         $sffx   = '.load';
         $reload = 'restart';
            }
           +elsif ( $obj eq 'conf' ) {
           +    $obj    = 'conf';
           +    $dir    = 'conf';
           +    $sffx   = '.conf';
           +    $reload = 'reload';
           +}
            else {
         $dir    = 'sites';
           -    $sffx   = '';
           +    $sffx   = '.conf';
         $reload = 'reload';
            }
            $name = ucfirst($obj);
            
           -my $confdir  = $ENV{APACHE_CONFDIR}                  || "/etc/apache2$dir_suffix";
           -my $availdir = $ENV{ uc("APACHE_${dir}_AVAILABLE") } || "$confdir/$dir-available";
           -my $enabldir = $ENV{ uc("APACHE_${dir}_ENABLED") }   || "$confdir/$dir-enabled";
           +my $confdir = $ENV{APACHE_CONFDIR} || "/etc/apache2$dir_suffix";
           +my $availdir = $ENV{ uc("APACHE_${dir}_AVAILABLE") }
           +    || "$confdir/$dir-available";
           +my $enabldir = $ENV{ uc("APACHE_${dir}_ENABLED") } || "$confdir/$dir-enabled";
           +my $statedir = $ENV{ uc("APACHE_STATE_DIRECTORY") } || "/usr/lib/apache2";
            
           +$statedir .= "/$obj";
           +
            my $choicedir = $act eq 'enable' ? $availdir : $enabldir;
            my $linkdir = File::Spec->abs2rel( $availdir, $enabldir );
            
           @@ -70,6 +88,7 @@
            
            my @objs;
            foreach my $arg (@ARGV) {
           +    $arg =~ s/${sffx}$//;
         my @glob = myglob($arg);
         if ( !@glob ) {
             error("No $obj found matching $arg!\n");
           @@ -84,8 +103,9 @@
         doit($acton) or $rc = 1;
            }
            
           -info("To activate the new configuration, you need to run:\n  service apache2 $reload\n")
           -    if $request_reload;
           +info(
           +    "To activate the new configuration, you need to run:\n  service apache2 $reload\n"
           +) if $request_reload;
            
            exit($rc);
            
           @@ -97,29 +117,20 @@
         my @glob = map {
             s{^$choicedir/}{};
             s{$sffx$}{};
           -        s{^000-default$}{default};
             $_
         } glob("$choicedir/$arg$sffx");
            
           -    # use same rules as apache's Include directive
           -    @glob = grep( /^[[:alnum:]][-._[:alnum:]]*$/, @glob );
           -    @glob = grep( !/\.dpkg/, @glob );
           -
         return @glob;
            }
            
            sub doit {
         my $acton = shift;
            
           -    my $prio = "";
           -    if ( $obj eq 'site' && $acton eq 'default' ) {
           -        $prio = '000-';
           -    }
           -
         my ( $conftgt, $conflink );
         if ( $obj eq 'module' ) {
             if ( $acton eq 'cgi' && threaded() ) {
           -            print "Your MPM seems to be threaded. Selecting cgid instead of cgi.\n";
           +            print
           +                "Your MPM seems to be threaded. Selecting cgid instead of cgi.\n";
                 $acton = 'cgid';
             }
            
           @@ -130,20 +141,35 @@
         }
            
         my $tgt  = "$availdir/$acton$sffx";
           -    my $link = "$enabldir/$prio$acton$sffx";
           +    my $link = "$enabldir/$acton$sffx";
            
         if ( !-e $tgt ) {
             if ( -l $link && !-e $link ) {
           -		if ( $act eq 'disable' ) {
           -			info("removing dangling symlink $link\n");
           -			unlink($link);
           -			return 1;
           -		}
           -		else {
           -			error("$link is a dangling symlink!\n");
           -		}
           -	}
           +            if ( $act eq 'disable' ) {
           +                info("removing dangling symlink $link\n");
           +                unlink($link);
            
       h. It may exist as dangling link, too
           +                $conflink = "$enabldir/$acton.conf";
           +
           +                if ( -l $conflink && !-e $conflink ) {
           +                    info("removing dangling symlink $conflink\n");
           +                    unlink($conflink);
           +                }
           +
           +                return 1;
           +            }
           +            else {
           +                error("$link is a dangling symlink!\n");
           +            }
           +        }
           +
           +        if ( $purge ) {
           +            switch_marker( $obj, $act, $acton );
           +            # exit silently, we are purging anyway
           +            return 1;
           +        }
           +
             error("$name $acton does not exist!\n");
             return 0;
         }
           @@ -151,28 +177,44 @@
         # handle module dependencies
         if ( $obj eq 'module' ) {
             if ( $act eq 'enable' ) {
           -            my $depends = qx{grep "# Depends:" "$availdir/$acton.load"|cut -f2 -d:};
           -            $depends =~ s,^[\s\n]+,,;
           -            $depends =~ s,[\s\n]+$,,;
           -            do_deps( $acton, split( /[\n\s]+/, $depends ) ) or return 0;
           +            if ( $acton eq 'mpm_itk' ) {
           +                warning(  "MPM_ITK is a third party module that is not part "
           +                        . "of the official Apache HTTPD. It has seen less "
           +                        . "testing than the official MPM modules." );
           +            }
           +            my @depends = get_deps("$availdir/$acton.load");
           +            do_deps( $acton, @depends ) or return 0;
           +
           +            my @conflicts = get_deps( "$availdir/$acton.load", "Conflicts" );
           +            check_conflicts( $acton, @conflicts ) or return 0;
             }
             else {
           -            my @depends = qx{egrep "# Depends:.*${acton}( |\$)" $enabldir/*.load};
           -            @depends = grep {s{^.*?/([^/]*?)\.load:.*}{$1}s} @depends;
           -            if ( scalar @depends ) {
           +            my @depending;
           +            foreach my $d ( glob("$enabldir/*.load") ) {
           +                my @deps = get_deps($d);
           +                if ( is_in( $acton, @deps ) ) {
           +                    $d =~ m,/([^/]+).load$,;
           +                    push @depending, $1;
           +                }
           +            }
           +            if ( scalar @depending ) {
                     if ($force) {
           -                    do_deps( $acton, @depends ) or return 0;
       
                     }
                     else {
                         error(
                             "The following modules depend on $acton ",
           -                        "and need to be disabled first: @depends\n"
           +                        "and need to be disabled first: @depending\n"
                         );
                         return 0;
                     }
                 }
             }
         }
           +    elsif ( $act eq 'enable' ) {
           +        my @depends = get_deps("$availdir/$acton$sffx");
           +        warn_deps( $acton, @depends ) or return 0;
           +    }
            
         if ( $act eq 'enable' ) {
             my $check = check_link( $tgt, $link );
           @@ -190,7 +232,9 @@
                         add_link( $conftgt, $conflink ) or return 0;
                     }
                     else {
           -                    error("Config file $acton.conf not properly enabled: $confcheck\n");
           +                    error(
           +                        "Config file $acton.conf not properly enabled: $confcheck\n"
           +                    );
                         return 0;
                     }
                 }
           @@ -208,17 +252,21 @@
                         add_link( $conftgt, $conflink ) or return 0;
                     }
                     elsif ( $confcheck ne 'ok' ) {
           -                    error("Config file $acton.conf not properly enabled: $confcheck\n");
           +                    error(
           +                        "Config file $acton.conf not properly enabled: $confcheck\n"
           +                    );
                         return 0;
                     }
                 }
            
                 print "Enabling $obj $acton.\n";
                 if ( $acton eq 'ssl' ) {
           -                info("See /usr/share/doc/apache2.2-common/README.Debian.gz on " .
           -                     "how to configure SSL and create self-signed certificates.\n");
           -	    }
           -            return add_link( $tgt, $link );
           +                info(     "See /usr/share/doc/apache2/README.Debian.gz on "
           +                        . "how to configure SSL and create self-signed certificates.\n"
           +                );
           +            }
           +            return add_link( $tgt, $link )
           +                && switch_marker( $obj, $act, $acton );
             }
             else {
                 error("$name $acton not properly enabled: $check\n");
           @@ -231,6 +279,7 @@
                 if ( $conflink && -e $conflink ) {
                     remove_link($conflink);
                 }
           +            switch_marker( $obj, $act, $acton );
                 print "$name $acton disabled.\n";
             }
             elsif ( $conflink && -e $conflink ) {
           @@ -239,6 +288,9 @@
             }
             else {
                 info("$name $acton already disabled\n");
           +            if ( $purge ) {
           +                switch_marker( $obj, $act, $acton );
           +            }
                 return 1;
             }
         }
           @@ -246,6 +298,29 @@
         return 1;
            }
            
           +sub get_deps {
           +    my $file = shift;
           +    my $type = shift || "Depends";
           +
           +    my $fd;
           +    if ( !open( $fd, '<', $file ) ) {
           +        error("Can't open $file: $!");
           +        return;
           +    }
           +    my $line;
           +    while ( defined( $line = <$fd> ) ) {
           +        chomp $line;
           +        if ( $line =~ /^# $type:\s+(.*?)\s*$/ ) {
           +            my $deps = $1;
           +            return split( /[\n\s]+/, $deps );
           +        }
           +
           +        # only check until the first non-empty non-comment line
           +        last if ( $line !~ /^\s*(?:#.*)?$/ );
           +    }
           +    return;
           +}
           +
            sub do_deps {
         my $acton = shift;
         foreach my $d (@_) {
           @@ -258,6 +333,48 @@
         return 1;
            }
            
           +sub warn_deps {
           +    my $acton = shift;
           +    my $modsenabldir = $ENV{APACHE_MODS_ENABLED} || "$confdir/mods-enabled";
           +    foreach my $d (@_) {
           +        info("Checking dependency $d for $acton:\n");
           +        if ( !-e "$modsenabldir/$d.load" ) {
           +            warning(
       +                "Module $d is not enabled, but $acton depends on it, aborting\n"
           +            );
           +            return 0;
           +        }
       +    }
       +    return 1;
           +}
           +
           +sub check_conflicts {
           +    my $acton    = shift;
           +    my $haderror = 0;
       +    foreach my $d (@_) {
           +        info("Considering conflict $d for $acton:\n");
           +
           +        my $tgt  = "$availdir/$d$sffx";
           +        my $link = "$enabldir/$d$sffx";
           +
           +        my $confcheck = check_link( $tgt, $link );
           +        if ( $confcheck eq 'ok' ) {
           +            error(
           +                "Module $d is enabled - cannot proceed due to conflicts. It needs to be disabled first!\n"
           +            );
           +
           +            # Don't return immediately, there could be several conflicts
           +            $haderror++;
           +        }
           +    }
           +
           +    if ($haderror) {
           +        return 0;
           +    }
           +
           +    return 1;
           +}
           +
            sub add_link {
         my ( $tgt, $link ) = @_;
            
           @@ -307,13 +424,36 @@
            
            sub threaded {
         my $result = "";
           -    $result = qx{/usr/sbin/apache2 -V | grep 'threaded'} if -x '/usr/sbin/apache2';
           +    $result = qx{/usr/sbin/apache2ctl -V | grep 'threaded'}
           +        if -x '/usr/sbin/apache2ctl';
           +    if ( $? != 0 ) {
           +
           +        # config doesn't work
           +        if ( -e "$enabldir/mpm_prefork.load" || -e "$enabldir/mpm_itk.load" )
           +        {
           +            return 0;
           +        }
           +        elsif (-e "$enabldir/mpm_worker.load"
           +            || -e "$enabldir/mpm_event.load" )
           +        {
           +            return 1;
           +        }
           +        else {
           +            error("Can't determine enabled MPM");
           +
           +            # do what user requested
           +            return 0;
           +        }
           +    }
         if ( $result =~ / no/ ) {
             return 0;
         }
           -    else {
           +    elsif ( $result =~ / yes/ ) {
             return 1;
         }
           +    else {
           +        die("Can't parse output from apache2ctl -V:\n$result\n");
           +    }
            }
            
            sub info {
           @@ -324,6 +464,18 @@
         print STDERR 'ERROR: ', @_;
            }
            
           +sub warning {
           +    print STDERR 'WARNING: ', @_;
           +}
           +
           +sub is_in {
           +    my $needle = shift;
           +    foreach my $e (@_) {
           +        return 1 if $needle eq $e;
           +    }
           +    return 0;
           +}
           +
            sub read_env_file {
         my $file = shift;
            
           @@ -339,4 +491,43 @@
             $ENV{$1} = $2;
         }
            }
           +
           +sub switch_marker {
           +    die('usage: switch_marker([module|site|conf], [enable|disable], $name)')
           +        if @_ != 3;
           +    my $which = shift;
           +    my $what  = shift;
           +    my $name  = shift;
           +
           +    my $mode = "admin";
           +    $mode = "maint" if $maintmode;
           +
           +    #print("switch_marker $which $what $name\n");
           +    # TODO: get rid of the magic string(s)
           +    my $state_marker_dir = "$statedir/$what" . "d" . "_by_$mode";
           +    my $state_marker     = "$state_marker_dir/$name";
           +    if ( !-d $state_marker_dir ) {
           +        File::Path::mkpath("$state_marker_dir")
           +            || error(
           +            "Failed to create marker directory: '$state_marker_dir'\n");
           +    }
           +
           +    # XXX: swap find with perl alternative
           +    my @markers = qx{find "$statedir" -type f -a -name "$name"};
           +    chomp(@markers);
           +    foreach (@markers) {
           +        unless ( unlink $_ ) {
           +            error("Failed to remove old marker '$_'!\n") && return 0;
           +        }
           +    }
           +    unless ($purge) {
           +        qx{touch "$state_marker"};
           +        if ( $? != 0 ) {
           +            error("Failed to create marker '$state_marker'!\n") && return 0;
           +        }
           +        return 1;
           +    }
           +}
           +
       
           - change mode from '0755' to '0700'
         * link[/usr/sbin/a2dismod] action delete
           - delete link at /usr/sbin/a2dismod
         * template[/usr/sbin/a2dismod] action create
           - create new file /usr/sbin/a2dismod
           - update content in file /usr/sbin/a2dismod from none to ce53f4
           --- /usr/sbin/a2dismod	2015-04-24 08:38:17.756722378 +0000
           +++ /tmp/chef-rendered-template20150424-1339-12xiy1s	2015-04-24 08:38:17.756722378 +0000
           @@ -1 +1,533 @@
           +#!/usr/bin/perl -w
           +#
           +# a2enmod by Stefan Fritsch <sf@debian.org>
           +# Licensed under Apache License 2.0
           +#
           +# The coding style is "perltidy -pbp"
           +
           +use strict;
           +use Cwd 'realpath';
           +use File::Spec;
           +use File::Basename;
           +use File::Path;
           +use Getopt::Long;
           +
           +my $quiet;
           +my $force;
           +my $maintmode;
           +my $purge;
           +
           +Getopt::Long::Configure('bundling');
           +GetOptions(
           +    'quiet|q'     => \$quiet,
           +    'force|f'     => \$force,
           +    'maintmode|m' => \$maintmode,
           +    'purge|p'     => \$purge
           +) or exit 2;
           +
           +my $basename = basename($0);
           +$basename =~ /^a2(en|dis)(mod|site|conf)((?:-.+)?)$/
           +    or die "$basename call name unknown\n";
           +my $act        = $1;
           +my $obj        = $2;
           +my $dir_suffix = $3;
           +
           +my $env_file = $ENV{APACHE_ENVVARS}
           +    || (
           +    $ENV{APACHE_CONFDIR}
           +    ? "$ENV{APACHE_CONFDIR}/envvars"
           +    : "/etc/apache2$dir_suffix/envvars"
           +    );
           +$ENV{LANG} = 'C';
           +read_env_file($env_file);
           +
           +$act .= 'able';
           +my ( $name, $dir, $sffx, $reload );
           +if ( $obj eq 'mod' ) {
           +    $obj    = 'module';
           +    $dir    = 'mods';
           +    $sffx   = '.load';
           +    $reload = 'restart';
           +}
           +elsif ( $obj eq 'conf' ) {
           +    $obj    = 'conf';
           +    $dir    = 'conf';
           +    $sffx   = '.conf';
           +    $reload = 'reload';
           +}
           +else {
           +    $dir    = 'sites';
           +    $sffx   = '.conf';
           +    $reload = 'reload';
           +}
           +$name = ucfirst($obj);
           +
           +my $confdir = $ENV{APACHE_CONFDIR} || "/etc/apache2$dir_suffix";
           +my $availdir = $ENV{ uc("APACHE_${dir}_AVAILABLE") }
           +    || "$confdir/$dir-available";
           +my $enabldir = $ENV{ uc("APACHE_${dir}_ENABLED") } || "$confdir/$dir-enabled";
           +my $statedir = $ENV{ uc("APACHE_STATE_DIRECTORY") } || "/usr/lib/apache2";
           +
           +$statedir .= "/$obj";
           +
           +my $choicedir = $act eq 'enable' ? $availdir : $enabldir;
           +my $linkdir = File::Spec->abs2rel( $availdir, $enabldir );
           +
           +my $request_reload = 0;
           +
           +my $rc = 0;
           +
           +if ( !scalar @ARGV ) {
           +    my @choices = myglob('*');
           +    print "Your choices are: @choices\n";
           +    print "Which ${obj}(s) do you want to $act (wildcards ok)?\n";
           +    my $input = <>;
           +    @ARGV = split /\s+/, $input;
           +
           +}
           +
           +my @objs;
           +foreach my $arg (@ARGV) {
           +    $arg =~ s/${sffx}$//;
           +    my @glob = myglob($arg);
           +    if ( !@glob ) {
           +        error("No $obj found matching $arg!\n");
           +        $rc = 1;
           +    }
           +    else {
           +        push @objs, @glob;
           +    }
           +}
           +
           +foreach my $acton (@objs) {
           +    doit($acton) or $rc = 1;
           +}
           +
           +info(
           +    "To activate the new configuration, you need to run:\n  service apache2 $reload\n"
           +) if $request_reload;
           +
           +exit($rc);
           +
           +##############################################################################
           +
           +sub myglob {
           +    my $arg = shift;
           +
           +    my @glob = map {
           +        s{^$choicedir/}{};
           +        s{$sffx$}{};
           +        $_
           +    } glob("$choicedir/$arg$sffx");
           +
           +    return @glob;
           +}
           +
           +sub doit {
           +    my $acton = shift;
           +
           +    my ( $conftgt, $conflink );
           +    if ( $obj eq 'module' ) {
           +        if ( $acton eq 'cgi' && threaded() ) {
           +            print
           +                "Your MPM seems to be threaded. Selecting cgid instead of cgi.\n";
           +            $acton = 'cgid';
           +        }
           +
           +        $conftgt = "$availdir/$acton.conf";
           +        if ( -e $conftgt ) {
           +            $conflink = "$enabldir/$acton.conf";
           +        }
           +    }
           +
           +    my $tgt  = "$availdir/$acton$sffx";
           +    my $link = "$enabldir/$acton$sffx";
           +
           +    if ( !-e $tgt ) {
           +        if ( -l $link && !-e $link ) {
           +            if ( $act eq 'disable' ) {
           +                info("removing dangling symlink $link\n");
           +                unlink($link);
           +
           +                # force a .conf path. It may exist as dangling link, too
           +                $conflink = "$enabldir/$acton.conf";
           +
           +                if ( -l $conflink && !-e $conflink ) {
           +                    info("removing dangling symlink $conflink\n");
           +                    unlink($conflink);
           +                }
           +
           +                return 1;
           +            }
           +            else {
           +                error("$link is a dangling symlink!\n");
           +            }
           +        }
           +
           +        if ( $purge ) {
           +            switch_marker( $obj, $act, $acton );
           +            # exit silently, we are purging anyway
           +            return 1;
           +        }
           +
       
       
           +    }
           +
           +    # handle module dependencies
           +    if ( $obj eq 'module' ) {
           +        if ( $act eq 'enable' ) {
           +            if ( $acton eq 'mpm_itk' ) {
           +                warning(  "MPM_ITK is a third party module that is not part "
           +                        . "of the official Apache HTTPD. It has seen less "
           +                        . "testing than the official MPM modules." );
           +            }
           +            my @depends = get_deps("$availdir/$acton.load");
           +            do_deps( $acton, @depends ) or return 0;
           +
           +            my @conflicts = get_deps( "$availdir/$acton.load", "Conflicts" );
           +            check_conflicts( $acton, @conflicts ) or return 0;
           +        }
           +        else {
           +            my @depending;
           +            foreach my $d ( glob("$enabldir/*.load") ) {
           +                my @deps = get_deps($d);
           +                if ( is_in( $acton, @deps ) ) {
           +                    $d =~ m,/([^/]+).load$,;
           +                    push @depending, $1;
           +                }
           +            }
           +            if ( scalar @depending ) {
           +                if ($force) {
           +                    do_deps( $acton, @depending ) or return 0;
           +                }
           +                else {
           +                    error(
           +                        "The following modules depend on $acton ",
           +                        "and need to be disabled first: @depending\n"
           +                    );
           +                    return 0;
           +                }
           +            }
           +        }
           +    }
           +    elsif ( $act eq 'enable' ) {
           +        my @depends = get_deps("$availdir/$acton$sffx");
           +        warn_deps( $acton, @depends ) or return 0;
           +    }
           +
           +    if ( $act eq 'enable' ) {
           +        my $check = check_link( $tgt, $link );
           +        if ( $check eq 'ok' ) {
           +            if ($conflink) {
           +
           +                # handle .conf file
           +                my $confcheck = check_link( $conftgt, $conflink );
           +                if ( $confcheck eq 'ok' ) {
           +                    info("$name $acton already enabled\n");
           +                    return 1;
           +                }
           +                elsif ( $confcheck eq 'missing' ) {
           +                    print "Enabling config file $acton.conf.\n";
           +                    add_link( $conftgt, $conflink ) or return 0;
           +                }
           +                else {
           +                    error(
           +                        "Config file $acton.conf not properly enabled: $confcheck\n"
           +                    );
           +                    return 0;
           +                }
           +            }
           +            else {
           +                info("$name $acton already enabled\n");
           +                return 1;
           +            }
           +        }
           +        elsif ( $check eq 'missing' ) {
           +            if ($conflink) {
           +
           +                # handle .conf file
           +                my $confcheck = check_link( $conftgt, $conflink );
           +                if ( $confcheck eq 'missing' ) {
           +                    add_link( $conftgt, $conflink ) or return 0;
           +                }
           +                elsif ( $confcheck ne 'ok' ) {
           +                    error(
           +                        "Config file $acton.conf not properly enabled: $confcheck\n"
           +                    );
           +                    return 0;
           +                }
           +            }
           +
           +            print "Enabling $obj $acton.\n";
           +            if ( $acton eq 'ssl' ) {
           +                info(     "See /usr/share/doc/apache2/README.Debian.gz on "
           +                        . "how to configure SSL and create self-signed certificates.\n"
           +                );
           +            }
           +            return add_link( $tgt, $link )
           +                && switch_marker( $obj, $act, $acton );
           +        }
           +        else {
           +            error("$name $acton not properly enabled: $check\n");
           +            return 0;
           +        }
           +    }
           +    else {
           +        if ( -e $link || -l $link ) {
           +            remove_link($link);
       && -e $conflink ) {
           +                remove_link($conflink);
           +            }
           +            switch_marker( $obj, $act, $acton );
           +            print "$name $acton disabled.\n";
           +        }
           +        elsif ( $conflink && -e $conflink ) {
           +            print "Disabling stale config file $acton.conf.\n";
           +            remove_link($conflink);
           +        }
           +        else {
           +            info("$name $acton already disabled\n");
           +            if ( $purge ) {
           +                switch_marker( $obj, $act, $acton );
           +            }
           +            return 1;
           +        }
           +    }
           +
           +    return 1;
           +}
           +
           +sub get_deps {
           +    my $file = shift;
           +    my $type = shift || "Depends";
           +
           +    my $fd;
           +    if ( !open( $fd, '<', $file ) ) {
           +        error("Can't open $file: $!");
           +        return;
           +    }
           +    my $line;
           +    while ( defined( $line = <$fd> ) ) {
           +        chomp $line;
           +        if ( $line =~ /^# $type:\s+(.*?)\s*$/ ) {
           +            my $deps = $1;
           +            return split( /[\n\s]+/, $deps );
           +        }
           +
           +        # only check until the first non-empty non-comment line
           +        last if ( $line !~ /^\s*(?:#.*)?$/ );
           +    }
           +    return;
           +}
           +
           +sub do_deps {
           +    my $acton = shift;
           +    foreach my $d (@_) {
           +        info("Considering dependency $d for $acton:\n");
           +        if ( !doit($d) ) {
           +            error("Could not $act dependency $d for $acton, aborting\n");
           +            return 0;
           +        }
           +    }
           +    return 1;
           +}
           +
           +sub warn_deps {
           +    my $acton = shift;
           +    my $modsenabldir = $ENV{APACHE_MODS_ENABLED} || "$confdir/mods-enabled";
           +    foreach my $d (@_) {
           +        info("Checking dependency $d for $acton:\n");
           +        if ( !-e "$modsenabldir/$d.load" ) {
           +            warning(
           +                "Module $d is not enabled, but $acton depends on it, aborting\n"
           +            );
           +            return 0;
           +        }
           +    }
           +    return 1;
           +}
           +
           +sub check_conflicts {
           +    my $acton    = shift;
           +    my $haderror = 0;
           +    foreach my $d (@_) {
           +        info("Considering conflict $d for $acton:\n");
           +
           +        my $tgt  = "$availdir/$d$sffx";
           +        my $link = "$enabldir/$d$sffx";
           +
           +        my $confcheck = check_link( $tgt, $link );
           +        if ( $confcheck eq 'ok' ) {
           +            error(
           +                "Module $d is enabled - cannot proceed due to conflicts. It needs to be disabled first!\n"
           +            );
           +
           +            # Don't return immediately, there could be several conflicts
           +            $haderror++;
           +        }
           +    }
           +
           +    if ($haderror) {
           +        return 0;
           +    }
           +
           +    return 1;
           +}
           +
       +sub add_link {
           +    my ( $tgt, $link ) = @_;
           +
           +    # create relative link
           +    if ( !symlink( File::Spec->abs2rel( $tgt, dirname($link) ), $link ) ) {
           +        die("Could not create $link: $!\n");
           +    }
           +    $request_reload = 1;
           +    return 1;
           +}
           +
           +sub check_link {
           +    my ( $tgt, $link ) = @_;
           +
           +    if ( !-e $link ) {
           +        if ( -l $link ) {
           +
           +            # points to nowhere
           +            info("Removing dangling link $link");
           +            unlink($link) or die "Could not remove $link\n";
           +        }
           +        return 'missing';
           +    }
           +
           +    if ( -e $link && !-l $link ) {
           +        return "$link is a real file, not touching it";
           +    }
           +    if ( realpath($link) ne realpath($tgt) ) {
           +        return "$link exists but does not point to $tgt, not touching it";
           +    }
           +    return 'ok';
           +}
           +
           +sub remove_link {
           +    my ($link) = @_;
           +
           +    if ( -l $link ) {
           +        unlink($link) or die "Could not remove $link: $!\n";
           +    }
           +    elsif ( -e $link ) {
           +        error("$link is not a symbolic link, not deleting\n");
           +        return 0;
           +    }
           +    $request_reload = 1;
           +    return 1;
           +}
           +
           +sub threaded {
           +    my $result = "";
           +    $result = qx{/usr/sbin/apache2ctl -V | grep 'threaded'}
           +        if -x '/usr/sbin/apache2ctl';
           +    if ( $? != 0 ) {
           +
           +        # config doesn't work
           +        if ( -e "$enabldir/mpm_prefork.load" || -e "$enabldir/mpm_itk.load" )
           +        {
           +            return 0;
           +        }
           +        elsif (-e "$enabldir/mpm_worker.load"
           +            || -e "$enabldir/mpm_event.load" )
           +        {
           +            return 1;
           +        }
           +        else {
           +            error("Can't determine enabled MPM");
           +
           +            # do what user requested
           +            return 0;
           +        }
           +    }
           +    if ( $result =~ / no/ ) {
           +        return 0;
           +    }
           +    elsif ( $result =~ / yes/ ) {
           +        return 1;
           +    }
           +    else {
           +        die("Can't parse output from apache2ctl -V:\n$result\n");
           +    }
           +}
           +
           +sub info {
           +    print @_ if !$quiet;
           +}
           +
           +sub error {
           +    print STDERR 'ERROR: ', @_;
           +}
           +
           +sub warning {
           +    print STDERR 'WARNING: ', @_;
           +}
           +
           +sub is_in {
           +    my $needle = shift;
           +    foreach my $e (@_) {
           +        return 1 if $needle eq $e;
           +    }
           +    return 0;
           +}
           +
           +sub read_env_file {
           +    my $file = shift;
           +
           +    -r $file or return;
           +    my @lines = qx{env - sh -c '. $file && env'};
           +    if ($?) {
           +        die "Could not read $file\n";
           +    }
           +
           +    foreach my $l (@lines) {
           +        chomp $l;
           +        $l =~ /^(.*)?=(.*)$/ or die "Could not parse $file\n";
           +        $ENV{$1} = $2;
           +    }
           +}
           +
           +sub switch_marker {
           +    die('usage: switch_marker([module|site|conf], [enable|disable], $name)')
           +        if @_ != 3;
           +    my $which = shift;
           +    my $what  = shift;
           +    my $name  = shift;
           +
           +    my $mode = "admin";
           +    $mode = "maint" if $maintmode;
           +
           +    #print("switch_marker $which $what $name\n");
           +    # TODO: get rid of the magic string(s)
           +    my $state_marker_dir = "$statedir/$what" . "d" . "_by_$mode";
           +    my $state_marker     = "$state_marker_dir/$name";
           +    if ( !-d $state_marker_dir ) {
           +        File::Path::mkpath("$state_marker_dir")
           +            || error(
           +            "Failed to create marker directory: '$state_marker_dir'\n");
           +    }
           +
           +    # XXX: swap find with perl alternative
           +    my @markers = qx{find "$statedir" -type f -a -name "$name"};
           +    chomp(@markers);
           +    foreach (@markers) {
           +        unless ( unlink $_ ) {
           +            error("Failed to remove old marker '$_'!\n") && return 0;
           +        }
           +    }
           +    unless ($purge) {
           +        qx{touch "$state_marker"};
           +        if ( $? != 0 ) {
           +            error("Failed to create marker '$state_marker'!\n") && return 0;
           +        }
           +        return 1;
           +    }
           +}
           +
           +# vim: syntax=perl sw=4 sts=4 sr et
           - change mode from '' to '0700'
           - change owner from '' to 'root'
           - change group from '' to 'root'
         * link[/usr/sbin/a2enconf] action delete (skipped due to only_if)
         * template[/usr/sbin/a2enconf] action create
           - create new file /usr/sbin/a2enconf
           - update content in file /usr/sbin/a2enconf from none to ce53f4
           --- /usr/sbin/a2enconf	2015-04-24 08:38:18.252716142 +0000
           +++ /tmp/chef-rendered-template20150424-1339-15fngvy	2015-04-24 08:38:18.252716142 +0000
           @@ -1 +1,533 @@
           +#!/usr/bin/perl -w
           +#
           +# a2enmod by Stefan Fritsch <sf@debian.org>
           +# Licensed under Apache License 2.0
           +#
           +# The coding style is "perltidy -pbp"
           +
           +use strict;
           +use Cwd 'realpath';
           +use File::Spec;
           +use File::Basename;
           +use File::Path;
           +use Getopt::Long;
           +
           +my $quiet;
           +my $force;
           +my $maintmode;
           +my $purge;
           +
           +Getopt::Long::Configure('bundling');
           +GetOptions(
           +    'quiet|q'     => \$quiet,
           +    'force|f'     => \$force,
           +    'maintmode|m' => \$maintmode,
           +    'purge|p'     => \$purge
           +) or exit 2;
           +
           +my $basename = basename($0);
           +$basename =~ /^a2(en|dis)(mod|site|conf)((?:-.+)?)$/
           +    or die "$basename call name unknown\n";
           +my $act        = $1;
           +my $obj        = $2;
           +my $dir_suffix = $3;
           +
           +my $env_file = $ENV{APACHE_ENVVARS}
           +    || (
           +    $ENV{APACHE_CONFDIR}
           +    ? "$ENV{APACHE_CONFDIR}/envvars"
           +    : "/etc/apache2$dir_suffix/envvars"
       
           +$ENV{LANG} = 'C';
           +read_env_file($env_file);
       
           +$act .= 'able';
       +my ( $name, $dir, $sffx, $reload );
       
           +    $obj    = 'module';
       +    $dir    = 'mods';
           +    $sffx   = '.load';
           +    $reload = 'restart';
           +}
       
       +    $obj    = 'conf';
           +    $dir    = 'conf';
           +    $sffx   = '.conf';
           +    $reload = 'reload';
       
       
           +    $dir    = 'sites';
           +    $sffx   = '.conf';
           +    $reload = 'reload';
           +}
       
           +
       +my $confdir = $ENV{APACHE_CONFDIR} || "/etc/apache2$dir_suffix";
           +my $availdir = $ENV{ uc("APACHE_${dir}_AVAILABLE") }
           +    || "$confdir/$dir-available";
           +my $enabldir = $ENV{ uc("APACHE_${dir}_ENABLED") } || "$confdir/$dir-enabled";
           +my $statedir = $ENV{ uc("APACHE_STATE_DIRECTORY") } || "/usr/lib/apache2";
           +
           +$statedir .= "/$obj";
           +
           +my $choicedir = $act eq 'enable' ? $availdir : $enabldir;
       +my $linkdir = File::Spec->abs2rel( $availdir, $enabldir );
           +
           +my $request_reload = 0;
           +
           +my $rc = 0;
           +
           +if ( !scalar @ARGV ) {
           +    my @choices = myglob('*');
           +    print "Your choices are: @choices\n";
           +    print "Which ${obj}(s) do you want to $act (wildcards ok)?\n";
           +    my $input = <>;
           +    @ARGV = split /\s+/, $input;
           +
           +}
           +
           +my @objs;
           +foreach my $arg (@ARGV) {
           +    $arg =~ s/${sffx}$//;
           +    my @glob = myglob($arg);
           +    if ( !@glob ) {
           +        error("No $obj found matching $arg!\n");
           +        $rc = 1;
           +    }
           +    else {
           +        push @objs, @glob;
           +    }
           +}
           +
           +foreach my $acton (@objs) {
           +    doit($acton) or $rc = 1;
           +}
           +
           +info(
           +    "To activate the new configuration, you need to run:\n  service apache2 $reload\n"
           +) if $request_reload;
           +
           +exit($rc);
           +
           +##############################################################################
           +
           +sub myglob {
           +    my $arg = shift;
           +
           +    my @glob = map {
           +        s{^$choicedir/}{};
           +        s{$sffx$}{};
           +        $_
           +    } glob("$choicedir/$arg$sffx");
           +
           +    return @glob;
           +}
           +
           +sub doit {
           +    my $acton = shift;
           +
           +    my ( $conftgt, $conflink );
           +    if ( $obj eq 'module' ) {
           +        if ( $acton eq 'cgi' && threaded() ) {
           +            print
           +                "Your MPM seems to be threaded. Selecting cgid instead of cgi.\n";
           +            $acton = 'cgid';
           +        }
           +
           +        $conftgt = "$availdir/$acton.conf";
           +        if ( -e $conftgt ) {
           +            $conflink = "$enabldir/$acton.conf";
           +        }
           +    }
           +
           +    my $tgt  = "$availdir/$acton$sffx";
           +    my $link = "$enabldir/$acton$sffx";
           +
           +    if ( !-e $tgt ) {
           +        if ( -l $link && !-e $link ) {
           +            if ( $act eq 'disable' ) {
           +                info("removing dangling symlink $link\n");
           +                unlink($link);
           +
           +                # force a .conf path. It may exist as dangling link, too
           +                $conflink = "$enabldir/$acton.conf";
           +
           +                if ( -l $conflink && !-e $conflink ) {
           +                    info("removing dangling symlink $conflink\n");
           +                    unlink($conflink);
           +                }
           +
           +                return 1;
           +            }
           +            else {
           +                error("$link is a dangling symlink!\n");
           +            }
           +        }
           +
           +        if ( $purge ) {
           +            switch_marker( $obj, $act, $acton );
           +            # exit silently, we are purging anyway
           +            return 1;
           +        }
           +
           +        error("$name $acton does not exist!\n");
           +        return 0;
           +    }
           +
           +    # handle module dependencies
           +    if ( $obj eq 'module' ) {
           +        if ( $act eq 'enable' ) {
           +            if ( $acton eq 'mpm_itk' ) {
           +                warning(  "MPM_ITK is a third party module that is not part "
           +                        . "of the official Apache HTTPD. It has seen less "
           +                        . "testing than the official MPM modules." );
           +            }
           +            my @depends = get_deps("$availdir/$acton.load");
           +            do_deps( $acton, @depends ) or return 0;
           +
           +            my @conflicts = get_deps( "$availdir/$acton.load", "Conflicts" );
           +            check_conflicts( $acton, @conflicts ) or return 0;
           +        }
           +        else {
           +            my @depending;
           +            foreach my $d ( glob("$enabldir/*.load") ) {
           +                my @deps = get_deps($d);
           +                if ( is_in( $acton, @deps ) ) {
           +                    $d =~ m,/([^/]+).load$,;
           +                    push @depending, $1;
           +                }
           +            }
           +            if ( scalar @depending ) {
           +                if ($force) {
           +                    do_deps( $acton, @depending ) or return 0;
           +                }
           +                else {
           +                    error(
           +                        "The following modules depend on $acton ",
           +                        "and need to be disabled first: @depending\n"
           +                    );
           +                    return 0;
           +                }
           +            }
           +        }
           +    }
           +    elsif ( $act eq 'enable' ) {
           +        my @depends = get_deps("$availdir/$acton$sffx");
           +        warn_deps( $acton, @depends ) or return 0;
           +    }
           +
           +    if ( $act eq 'enable' ) {
           +        my $check = check_link( $tgt, $link );
           +        if ( $check eq 'ok' ) {
           +            if ($conflink) {
           +
           +                # handle .conf file
           +                my $confcheck = check_link( $conftgt, $conflink );
           +                if ( $confcheck eq 'ok' ) {
           +                    info("$name $acton already enabled\n");
           +                    return 1;
           +                }
           +                elsif ( $confcheck eq 'missing' ) {
           +                    print "Enabling config file $acton.conf.\n";
           +                    add_link( $conftgt, $conflink ) or return 0;
           +                }
           +                else {
           +                    error(
           +                        "Config file $acton.conf not properly enabled: $confcheck\n"
           +                    );
           +                    return 0;
           +                }
           +            }
           +            else {
           +                info("$name $acton already enabled\n");
           +                return 1;
           +            }
           +        }
           +        elsif ( $check eq 'missing' ) {
           +            if ($conflink) {
           +
           +                # handle .conf file
           +                my $confcheck = check_link( $conftgt, $conflink );
           +                if ( $confcheck eq 'missing' ) {
           +                    add_link( $conftgt, $conflink ) or return 0;
           +                }
           +                elsif ( $confcheck ne 'ok' ) {
           +                    error(
           +                        "Config file $acton.conf not properly enabled: $confcheck\n"
           +                    );
           +                    return 0;
           +                }
           +            }
           +
           +            print "Enabling $obj $acton.\n";
           +            if ( $acton eq 'ssl' ) {
           +                info(     "See /usr/share/doc/apache2/README.Debian.gz on "
           +                        . "how to configure SSL and create self-signed certificates.\n"
           +                );
           +            }
           +            return add_link( $tgt, $link )
           +                && switch_marker( $obj, $act, $acton );
           +        }
           +        else {
           +            error("$name $acton not properly enabled: $check\n");
           +            return 0;
           +        }
           +    }
           +    else {
           +        if ( -e $link || -l $link ) {
           +            remove_link($link);
           +            if ( $conflink && -e $conflink ) {
           +                remove_link($conflink);
           +            }
           +            switch_marker( $obj, $act, $acton );
           +            print "$name $acton disabled.\n";
           +        }
           +        elsif ( $conflink && -e $conflink ) {
           +            print "Disabling stale config file $acton.conf.\n";
           +            remove_link($conflink);
           +        }
           +        else {
           +            info("$name $acton already disabled\n");
           +            if ( $purge ) {
           +                switch_marker( $obj, $act, $acton );
           +            }
           +            return 1;
           +        }
           +    }
           +
           +    return 1;
           +}
           +
           +sub get_deps {
           +    my $file = shift;
           +    my $type = shift || "Depends";
           +
           +    my $fd;
           +    if ( !open( $fd, '<', $file ) ) {
           +        error("Can't open $file: $!");
           +        return;
           +    }
           +    my $line;
           +    while ( defined( $line = <$fd> ) ) {
           +        chomp $line;
           +        if ( $line =~ /^# $type:\s+(.*?)\s*$/ ) {
           +            my $deps = $1;
           +            return split( /[\n\s]+/, $deps );
           +        }
           +
           +        # only check until the first non-empty non-comment line
           +        last if ( $line !~ /^\s*(?:#.*)?$/ );
           +    }
           +    return;
           +}
           +
           +sub do_deps {
           +    my $acton = shift;
           +    foreach my $d (@_) {
           +        info("Considering dependency $d for $acton:\n");
           +        if ( !doit($d) ) {
           +            error("Could not $act dependency $d for $acton, aborting\n");
           +            return 0;
           +        }
           +    }
           +    return 1;
           +}
           +
           +sub warn_deps {
           +    my $acton = shift;
           +    my $modsenabldir = $ENV{APACHE_MODS_ENABLED} || "$confdir/mods-enabled";
           +    foreach my $d (@_) {
           +        info("Checking dependency $d for $acton:\n");
           +        if ( !-e "$modsenabldir/$d.load" ) {
           +            warning(
           +                "Module $d is not enabled, but $acton depends on it, aborting\n"
           +            );
           +            return 0;
           +        }
           +    }
           +    return 1;
           +}
           +
           +sub check_conflicts {
           +    my $acton    = shift;
           +    my $haderror = 0;
           +    foreach my $d (@_) {
           +        info("Considering conflict $d for $acton:\n");
           +
           +        my $tgt  = "$availdir/$d$sffx";
           +        my $link = "$enabldir/$d$sffx";
           +
           +        my $confcheck = check_link( $tgt, $link );
           +        if ( $confcheck eq 'ok' ) {
           +            error(
           +                "Module $d is enabled - cannot proceed due to conflicts. It needs to be disabled first!\n"
           +            );
           +
           +            # Don't return immediately, there could be several conflicts
           +            $haderror++;
           +        }
           +    }
           +
           +    if ($haderror) {
           +        return 0;
           +    }
           +
           +    return 1;
           +}
           +
           +sub add_link {
           +    my ( $tgt, $link ) = @_;
           +
           +    # create relative link
           +    if ( !symlink( File::Spec->abs2rel( $tgt, dirname($link) ), $link ) ) {
           +        die("Could not create $link: $!\n");
           +    }
           +    $request_reload = 1;
           +    return 1;
           +}
           +
           +sub check_link {
           +    my ( $tgt, $link ) = @_;
           +
           +    if ( !-e $link ) {
           +        if ( -l $link ) {
           +
           +            # points to nowhere
           +            info("Removing dangling link $link");
           +            unlink($link) or die "Could not remove $link\n";
           +        }
           +        return 'missing';
           +    }
           +
           +    if ( -e $link && !-l $link ) {
           +        return "$link is a real file, not touching it";
           +    }
           +    if ( realpath($link) ne realpath($tgt) ) {
           +        return "$link exists but does not point to $tgt, not touching it";
           +    }
           +    return 'ok';
           +}
           +
           +sub remove_link {
           +    my ($link) = @_;
           +
           +    if ( -l $link ) {
           +        unlink($link) or die "Could not remove $link: $!\n";
           +    }
           +    elsif ( -e $link ) {
           +        error("$link is not a symbolic link, not deleting\n");
           +        return 0;
           +    }
           +    $request_reload = 1;
           +    return 1;
           +}
           +
           +sub threaded {
           +    my $result = "";
           +    $result = qx{/usr/sbin/apache2ctl -V | grep 'threaded'}
           +        if -x '/usr/sbin/apache2ctl';
           +    if ( $? != 0 ) {
           +
           +        # config doesn't work
           +        if ( -e "$enabldir/mpm_prefork.load" || -e "$enabldir/mpm_itk.load" )
           +        {
           +            return 0;
           +        }
           +        elsif (-e "$enabldir/mpm_worker.load"
           +            || -e "$enabldir/mpm_event.load" )
           +        {
           +            return 1;
           +        }
           +        else {
           +            error("Can't determine enabled MPM");
           +
           +            # do what user requested
           +            return 0;
           +        }
           +    }
           +    if ( $result =~ / no/ ) {
           +        return 0;
           +    }
           +    elsif ( $result =~ / yes/ ) {
           +        return 1;
           +    }
           +    else {
           +        die("Can't parse output from apache2ctl -V:\n$result\n");
           +    }
           +}
           +
           +sub info {
           +    print @_ if !$quiet;
           +}
           +
           +sub error {
           +    print STDERR 'ERROR: ', @_;
           +}
           +
           +sub warning {
           +    print STDERR 'WARNING: ', @_;
           +}
           +
           +sub is_in {
           +    my $needle = shift;
           +    foreach my $e (@_) {
           +        return 1 if $needle eq $e;
           +    }
           +    return 0;
           +}
           +
           +sub read_env_file {
           +    my $file = shift;
           +
           +    -r $file or return;
           +    my @lines = qx{env - sh -c '. $file && env'};
           +    if ($?) {
           +        die "Could not read $file\n";
           +    }
           +
           +    foreach my $l (@lines) {
           +        chomp $l;
           +        $l =~ /^(.*)?=(.*)$/ or die "Could not parse $file\n";
           +        $ENV{$1} = $2;
           +    }
           +}
           +
           +sub switch_marker {
           +    die('usage: switch_marker([module|site|conf], [enable|disable], $name)')
           +        if @_ != 3;
           +    my $which = shift;
           +    my $what  = shift;
           +    my $name  = shift;
           +
           +    my $mode = "admin";
           +    $mode = "maint" if $maintmode;
           +
           +    #print("switch_marker $which $what $name\n");
           +    # TODO: get rid of the magic string(s)
           +    my $state_marker_dir = "$statedir/$what" . "d" . "_by_$mode";
           +    my $state_marker     = "$state_marker_dir/$name";
           +    if ( !-d $state_marker_dir ) {
           +        File::Path::mkpath("$state_marker_dir")
           +            || error(
           +            "Failed to create marker directory: '$state_marker_dir'\n");
           +    }
       
       +    # XXX: swap find with perl alternative
           +    my @markers = qx{find "$statedir" -type f -a -name "$name"};
           +    chomp(@markers);
           +    foreach (@markers) {
           +        unless ( unlink $_ ) {
           +            error("Failed to remove old marker '$_'!\n") && return 0;
           +        }
           +    }
           +    unless ($purge) {
           +        qx{touch "$state_marker"};
           +        if ( $? != 0 ) {
           +            error("Failed to create marker '$state_marker'!\n") && return 0;
           +        }
           +        return 1;
           +    }
           +}
           +
           +# vim: syntax=perl sw=4 sts=4 sr et
           - change mode from '' to '0700'
           - change owner from '' to 'root'
           - change group from '' to 'root'
         * link[/usr/sbin/a2disconf] action delete (skipped due to only_if)
         * template[/usr/sbin/a2disconf] action create
           - create new file /usr/sbin/a2disconf
           - update content in file /usr/sbin/a2disconf from none to ce53f4
           --- /usr/sbin/a2disconf	2015-04-24 08:38:19.528700102 +0000
           +++ /tmp/chef-rendered-template20150424-1339-yq5i0g	2015-04-24 08:38:19.524700151 +0000
           @@ -1 +1,533 @@
           +#!/usr/bin/perl -w
           +#
           +# a2enmod by Stefan Fritsch <sf@debian.org>
           +# Licensed under Apache License 2.0
           +#
           +# The coding style is "perltidy -pbp"
           +
           +use strict;
           +use Cwd 'realpath';
           +use File::Spec;
           +use File::Basename;
           +use File::Path;
           +use Getopt::Long;
           +
           +my $quiet;
           +my $force;
           +my $maintmode;
           +my $purge;
       +
       
           +GetOptions(
           +    'quiet|q'     => \$quiet,
           +    'force|f'     => \$force,
           +    'maintmode|m' => \$maintmode,
           +    'purge|p'     => \$purge
           +) or exit 2;
           +
           +my $basename = basename($0);
           +$basename =~ /^a2(en|dis)(mod|site|conf)((?:-.+)?)$/
       
           +my $act        = $1;
           +my $obj        = $2;
           +my $dir_suffix = $3;
           +
           +my $env_file = $ENV{APACHE_ENVVARS}
           +    || (
       
           +    ? "$ENV{APACHE_CONFDIR}/envvars"
           +    : "/etc/apache2$dir_suffix/envvars"
           +    );
           +$ENV{LANG} = 'C';
           +read_env_file($env_file);
           +
           +$act .= 'able';
           +my ( $name, $dir, $sffx, $reload );
       +if ( $obj eq 'mod' ) {
           +    $obj    = 'module';
           +    $dir    = 'mods';
           +    $sffx   = '.load';
           +    $reload = 'restart';
       
           +elsif ( $obj eq 'conf' ) {
           +    $obj    = 'conf';
       +    $dir    = 'conf';
           +    $sffx   = '.conf';
           +    $reload = 'reload';
           +}
       +else {
           +    $dir    = 'sites';
           +    $sffx   = '.conf';
       
           +}
           +$name = ucfirst($obj);
           +
           +my $confdir = $ENV{APACHE_CONFDIR} || "/etc/apache2$dir_suffix";
           +my $availdir = $ENV{ uc("APACHE_${dir}_AVAILABLE") }
           +    || "$confdir/$dir-available";
           +my $enabldir = $ENV{ uc("APACHE_${dir}_ENABLED") } || "$confdir/$dir-enabled";
       +my $statedir = $ENV{ uc("APACHE_STATE_DIRECTORY") } || "/usr/lib/apache2";
           +
           +$statedir .= "/$obj";
           +
       +my $choicedir = $act eq 'enable' ? $availdir : $enabldir;
           +my $linkdir = File::Spec->abs2rel( $availdir, $enabldir );
           +
           +my $request_reload = 0;
           +
           +my $rc = 0;
           +
       
       +    my @choices = myglob('*');
           +    print "Your choices are: @choices\n";
           +    print "Which ${obj}(s) do you want to $act (wildcards ok)?\n";
           +    my $input = <>;
           +    @ARGV = split /\s+/, $input;
           +
           +}
           +
           +my @objs;
           +foreach my $arg (@ARGV) {
           +    $arg =~ s/${sffx}$//;
           +    my @glob = myglob($arg);
           +    if ( !@glob ) {
           +        error("No $obj found matching $arg!\n");
           +        $rc = 1;
           +    }
           +    else {
           +        push @objs, @glob;
           +    }
           +}
           +
           +foreach my $acton (@objs) {
           +    doit($acton) or $rc = 1;
           +}
           +
           +info(
           +    "To activate the new configuration, you need to run:\n  service apache2 $reload\n"
           +) if $request_reload;
           +
           +exit($rc);
           +
           +##############################################################################
           +
           +sub myglob {
           +    my $arg = shift;
           +
           +    my @glob = map {
           +        s{^$choicedir/}{};
           +        s{$sffx$}{};
           +        $_
           +    } glob("$choicedir/$arg$sffx");
           +
           +    return @glob;
           +}
           +
           +sub doit {
           +    my $acton = shift;
           +
           +    my ( $conftgt, $conflink );
           +    if ( $obj eq 'module' ) {
           +        if ( $acton eq 'cgi' && threaded() ) {
           +            print
           +                "Your MPM seems to be threaded. Selecting cgid instead of cgi.\n";
           +            $acton = 'cgid';
           +        }
           +
           +        $conftgt = "$availdir/$acton.conf";
           +        if ( -e $conftgt ) {
           +            $conflink = "$enabldir/$acton.conf";
           +        }
           +    }
           +
           +    my $tgt  = "$availdir/$acton$sffx";
           +    my $link = "$enabldir/$acton$sffx";
           +
           +    if ( !-e $tgt ) {
           +        if ( -l $link && !-e $link ) {
           +            if ( $act eq 'disable' ) {
           +                info("removing dangling symlink $link\n");
           +                unlink($link);
           +
           +                # force a .conf path. It may exist as dangling link, too
           +                $conflink = "$enabldir/$acton.conf";
           +
           +                if ( -l $conflink && !-e $conflink ) {
           +                    info("removing dangling symlink $conflink\n");
           +                    unlink($conflink);
           +                }
           +
           +                return 1;
           +            }
           +            else {
           +                error("$link is a dangling symlink!\n");
           +            }
           +        }
           +
           +        if ( $purge ) {
           +            switch_marker( $obj, $act, $acton );
           +            # exit silently, we are purging anyway
           +            return 1;
           +        }
           +
           +        error("$name $acton does not exist!\n");
           +        return 0;
           +    }
           +
           +    # handle module dependencies
           +    if ( $obj eq 'module' ) {
           +        if ( $act eq 'enable' ) {
           +            if ( $acton eq 'mpm_itk' ) {
           +                warning(  "MPM_ITK is a third party module that is not part "
           +                        . "of the official Apache HTTPD. It has seen less "
           +                        . "testing than the official MPM modules." );
           +            }
           +            my @depends = get_deps("$availdir/$acton.load");
           +            do_deps( $acton, @depends ) or return 0;
           +
           +            my @conflicts = get_deps( "$availdir/$acton.load", "Conflicts" );
           +            check_conflicts( $acton, @conflicts ) or return 0;
           +        }
           +        else {
           +            my @depending;
           +            foreach my $d ( glob("$enabldir/*.load") ) {
           +                my @deps = get_deps($d);
           +                if ( is_in( $acton, @deps ) ) {
           +                    $d =~ m,/([^/]+).load$,;
           +                    push @depending, $1;
           +                }
           +            }
           +            if ( scalar @depending ) {
           +                if ($force) {
           +                    do_deps( $acton, @depending ) or return 0;
           +                }
           +                else {
           +                    error(
           +                        "The following modules depend on $acton ",
           +                        "and need to be disabled first: @depending\n"
       +                    );
           +                    return 0;
           +                }
           +            }
           +        }
           +    }
           +    elsif ( $act eq 'enable' ) {
           +        my @depends = get_deps("$availdir/$acton$sffx");
           +        warn_deps( $acton, @depends ) or return 0;
           +    }
           +
           +    if ( $act eq 'enable' ) {
           +        my $check = check_link( $tgt, $link );
           +        if ( $check eq 'ok' ) {
           +            if ($conflink) {
           +
           +                # handle .conf file
           +                my $confcheck = check_link( $conftgt, $conflink );
           +                if ( $confcheck eq 'ok' ) {
           +                    info("$name $acton already enabled\n");
           +                    return 1;
           +                }
           +                elsif ( $confcheck eq 'missing' ) {
           +                    print "Enabling config file $acton.conf.\n";
           +                    add_link( $conftgt, $conflink ) or return 0;
           +                }
           +                else {
           +                    error(
           +                        "Config file $acton.conf not properly enabled: $confcheck\n"
           +                    );
           +                    return 0;
           +                }
           +            }
           +            else {
           +                info("$name $acton already enabled\n");
           +                return 1;
           +            }
           +        }
           +        elsif ( $check eq 'missing' ) {
           +            if ($conflink) {
           +
           +                # handle .conf file
           +                my $confcheck = check_link( $conftgt, $conflink );
           +                if ( $confcheck eq 'missing' ) {
           +                    add_link( $conftgt, $conflink ) or return 0;
           +                }
           +                elsif ( $confcheck ne 'ok' ) {
           +                    error(
           +                        "Config file $acton.conf not properly enabled: $confcheck\n"
           +                    );
           +                    return 0;
           +                }
           +            }
           +
           +            print "Enabling $obj $acton.\n";
           +            if ( $acton eq 'ssl' ) {
           +                info(     "See /usr/share/doc/apache2/README.Debian.gz on "
           +                        . "how to configure SSL and create self-signed certificates.\n"
           +                );
           +            }
           +            return add_link( $tgt, $link )
           +                && switch_marker( $obj, $act, $acton );
           +        }
           +        else {
           +            error("$name $acton not properly enabled: $check\n");
           +            return 0;
           +        }
           +    }
           +    else {
           +        if ( -e $link || -l $link ) {
           +            remove_link($link);
           +            if ( $conflink && -e $conflink ) {
           +                remove_link($conflink);
           +            }
           +            switch_marker( $obj, $act, $acton );
           +            print "$name $acton disabled.\n";
           +        }
           +        elsif ( $conflink && -e $conflink ) {
           +            print "Disabling stale config file $acton.conf.\n";
           +            remove_link($conflink);
           +        }
           +        else {
           +            info("$name $acton already disabled\n");
           +            if ( $purge ) {
           +                switch_marker( $obj, $act, $acton );
           +            }
           +            return 1;
           +        }
           +    }
           +
           +    return 1;
           +}
           +
           +sub get_deps {
           +    my $file = shift;
           +    my $type = shift || "Depends";
           +
           +    my $fd;
           +    if ( !open( $fd, '<', $file ) ) {
           +        error("Can't open $file: $!");
           +        return;
           +    }
           +    my $line;
           +    while ( defined( $line = <$fd> ) ) {
           +        chomp $line;
           +        if ( $line =~ /^# $type:\s+(.*?)\s*$/ ) {
           +            my $deps = $1;
           +            return split( /[\n\s]+/, $deps );
           +        }
           +
           +        # only check until the first non-empty non-comment line
           +        last if ( $line !~ /^\s*(?:#.*)?$/ );
           +    }
           +    return;
           +}
           +
           +sub do_deps {
           +    my $acton = shift;
           +    foreach my $d (@_) {
           +        info("Considering dependency $d for $acton:\n");
           +        if ( !doit($d) ) {
           +            error("Could not $act dependency $d for $acton, aborting\n");
           +            return 0;
           +        }
           +    }
           +    return 1;
           +}
           +
           +sub warn_deps {
           +    my $acton = shift;
           +    my $modsenabldir = $ENV{APACHE_MODS_ENABLED} || "$confdir/mods-enabled";
           +    foreach my $d (@_) {
           +        info("Checking dependency $d for $acton:\n");
           +        if ( !-e "$modsenabldir/$d.load" ) {
           +            warning(
           +                "Module $d is not enabled, but $acton depends on it, aborting\n"
           +            );
           +            return 0;
           +        }
           +    }
           +    return 1;
           +}
           +
           +sub check_conflicts {
           +    my $acton    = shift;
           +    my $haderror = 0;
           +    foreach my $d (@_) {
           +        info("Considering conflict $d for $acton:\n");
           +
           +        my $tgt  = "$availdir/$d$sffx";
           +        my $link = "$enabldir/$d$sffx";
           +
           +        my $confcheck = check_link( $tgt, $link );
           +        if ( $confcheck eq 'ok' ) {
           +            error(
           +                "Module $d is enabled - cannot proceed due to conflicts. It needs to be disabled first!\n"
           +            );
           +
           +            # Don't return immediately, there could be several conflicts
           +            $haderror++;
           +        }
           +    }
           +
           +    if ($haderror) {
           +        return 0;
           +    }
           +
           +    return 1;
           +}
           +
           +sub add_link {
           +    my ( $tgt, $link ) = @_;
           +
           +    # create relative link
           +    if ( !symlink( File::Spec->abs2rel( $tgt, dirname($link) ), $link ) ) {
           +        die("Could not create $link: $!\n");
           +    }
           +    $request_reload = 1;
           +    return 1;
           +}
           +
           +sub check_link {
           +    my ( $tgt, $link ) = @_;
           +
           +    if ( !-e $link ) {
           +        if ( -l $link ) {
           +
           +            # points to nowhere
           +            info("Removing dangling link $link");
           +            unlink($link) or die "Could not remove $link\n";
           +        }
           +        return 'missing';
           +    }
           +
           +    if ( -e $link && !-l $link ) {
           +        return "$link is a real file, not touching it";
           +    }
           +    if ( realpath($link) ne realpath($tgt) ) {
           +        return "$link exists but does not point to $tgt, not touching it";
           +    }
           +    return 'ok';
           +}
           +
           +sub remove_link {
           +    my ($link) = @_;
           +
           +    if ( -l $link ) {
           +        unlink($link) or die "Could not remove $link: $!\n";
           +    }
           +    elsif ( -e $link ) {
           +        error("$link is not a symbolic link, not deleting\n");
           +        return 0;
           +    }
           +    $request_reload = 1;
           +    return 1;
           +}
           +
           +sub threaded {
           +    my $result = "";
           +    $result = qx{/usr/sbin/apache2ctl -V | grep 'threaded'}
           +        if -x '/usr/sbin/apache2ctl';
           +    if ( $? != 0 ) {
           +
           +        # config doesn't work
           +        if ( -e "$enabldir/mpm_prefork.load" || -e "$enabldir/mpm_itk.load" )
           +        {
           +            return 0;
           +        }
           +        elsif (-e "$enabldir/mpm_worker.load"
           +            || -e "$enabldir/mpm_event.load" )
           +        {
           +            return 1;
           +        }
           +        else {
           +            error("Can't determine enabled MPM");
           +
           +            # do what user requested
           +            return 0;
           +        }
           +    }
           +    if ( $result =~ / no/ ) {
           +        return 0;
           +    }
           +    elsif ( $result =~ / yes/ ) {
           +        return 1;
           +    }
           +    else {
           +        die("Can't parse output from apache2ctl -V:\n$result\n");
           +    }
           +}
           +
           +sub info {
           +    print @_ if !$quiet;
           +}
           +
           +sub error {
           +    print STDERR 'ERROR: ', @_;
           +}
           +
           +sub warning {
           +    print STDERR 'WARNING: ', @_;
           +}
           +
           +sub is_in {
           +    my $needle = shift;
           +    foreach my $e (@_) {
           +        return 1 if $needle eq $e;
           +    }
           +    return 0;
           +}
           +
           +sub read_env_file {
           +    my $file = shift;
           +
           +    -r $file or return;
           +    my @lines = qx{env - sh -c '. $file && env'};
           +    if ($?) {
           +        die "Could not read $file\n";
           +    }
           +
           +    foreach my $l (@lines) {
           +        chomp $l;
           +        $l =~ /^(.*)?=(.*)$/ or die "Could not parse $file\n";
           +        $ENV{$1} = $2;
           +    }
           +}
           +
           +sub switch_marker {
           +    die('usage: switch_marker([module|site|conf], [enable|disable], $name)')
           +        if @_ != 3;
           +    my $which = shift;
           +    my $what  = shift;
           +    my $name  = shift;
           +
           +    my $mode = "admin";
           +    $mode = "maint" if $maintmode;
           +
           +    #print("switch_marker $which $what $name\n");
           +    # TODO: get rid of the magic string(s)
           +    my $state_marker_dir = "$statedir/$what" . "d" . "_by_$mode";
           +    my $state_marker     = "$state_marker_dir/$name";
           +    if ( !-d $state_marker_dir ) {
           +        File::Path::mkpath("$state_marker_dir")
           +            || error(
           +            "Failed to create marker directory: '$state_marker_dir'\n");
           +    }
           +
           +    # XXX: swap find with perl alternative
           +    my @markers = qx{find "$statedir" -type f -a -name "$name"};
           +    chomp(@markers);
           +    foreach (@markers) {
           +        unless ( unlink $_ ) {
           +            error("Failed to remove old marker '$_'!\n") && return 0;
           +        }
           +    }
           +    unless ($purge) {
           +        qx{touch "$state_marker"};
           +        if ( $? != 0 ) {
           +            error("Failed to create marker '$state_marker'!\n") && return 0;
           +        }
           +        return 1;
           +    }
           +}
           +
           +# vim: syntax=perl sw=4 sts=4 sr et
           - change mode from '' to '0700'
           - change owner from '' to 'root'
       
         * directory[/etc/apache2/ssl] action create
           - create new directory /etc/apache2/ssl
           - change mode from '' to '0755'
           - change owner from '' to 'root'
           - change group from '' to 'root'
         * directory[/var/cache/apache2] action create
           - change owner from 'www-data' to 'root'
           - change group from 'www-data' to 'root'
         * directory[/var/lock/apache2] action create (up to date)
         * template[/etc/sysconfig/apache2] action create (skipped due to only_if)
         * template[/etc/apache2/envvars] action create
           - update content in file /etc/apache2/envvars from 57ed3f to ed0ad7
           --- /etc/apache2/envvars	2012-02-07 04:16:59.000000000 +0000
           +++ /tmp/chef-rendered-template20150424-1339-nnpcan	2015-04-24 08:38:20.488688033 +0000
           @@ -3,30 +3,22 @@
            # this won't be correct after changing uid
            unset HOME
            
           -# for supporting multiple apache2 instances
           -if [ "${APACHE_CONFDIR##/etc/apache2-}" != "${APACHE_CONFDIR}" ] ; then
           -	SUFFIX="-${APACHE_CONFDIR##/etc/apache2-}"
           -else
           -	SUFFIX=
           -fi
           -
            # Since there is no sane way to get the parsed apache2 config in scripts, some
            # settings are defined via environment variables and then used in apache2ctl,
            # /etc/init.d/apache2, /etc/logrotate.d/apache2, etc.
            export APACHE_RUN_USER=www-data
            export APACHE_RUN_GROUP=www-data
           -export APACHE_PID_FILE=/var/run/apache2$SUFFIX.pid
           -export APACHE_RUN_DIR=/var/run/apache2$SUFFIX
           -export APACHE_LOCK_DIR=/var/lock/apache2$SUFFIX
           +# temporary state file location. This might be changed to /run in Wheezy+1
           +export APACHE_PID_FILE=/var/run/apache2.pid
           +export APACHE_RUN_DIR=/var/run/apache2
           +export APACHE_LOCK_DIR=/var/lock/apache2
            # Only /var/log/apache2 is handled by /etc/logrotate.d/apache2.
           -export APACHE_LOG_DIR=/var/log/apache2$SUFFIX
           +export APACHE_LOG_DIR=/var/log/apache2
            
            ## The locale used by some modules like mod_dav
            export LANG=C
           -## Uncomment the following line to use the system default locale instead:
           -#. /etc/default/locale
           +export LC_ALL=C
            
           -export LANG
            
            ## The command to get the status for 'apache2ctl status'.
            ## Some packages providing 'www-browser' need '--dump' instead of '-dump'.
           @@ -35,4 +27,13 @@
            ## If you need a higher file descriptor limit, uncomment and adjust the
            ## following line (default is 8192):
            #APACHE_ULIMIT_MAX_FILES='ulimit -n 65536'
           +
           +## If you would like to pass arguments to the web server, add them below
           +## to the APACHE_ARGUMENTS environment.
           +#export APACHE_ARGUMENTS=''
           +
           +## Enable the debug mode for maintainer scripts.
           +## This will produce a verbose output on package installations of web server modules and web application
           +## installations which interact with Apache
       
         * template[apache2.conf] action create
           - update content in file /etc/apache2/apache2.conf from ad8601 to 9e43cc
           --- /etc/apache2/apache2.conf	2012-02-07 04:16:59.000000000 +0000
           +++ /tmp/chef-rendered-template20150424-1339-gs6qul	2015-04-24 08:38:20.520687631 +0000
           @@ -1,65 +1,20 @@
            #
           -# Based upon the NCSA server configuration files originally by Rob McCool.
           +# Generated by Chef
            #
           -# This is the main Apache server configuration file.  It contains the
           -# configuration directives that give the server its instructions.
           -# See http://httpd.apache.org/docs/2.2/ for detailed information about
           -# the directives.
           -#
           -# Do NOT simply read the instructions in here without understanding
           -# what they do.  They're here only as hints or reminders.  If you are unsure
           -# consult the online docs. You have been warned.  
           -#
           -# The configuration directives are grouped into three basic sections:
           -#  1. Directives that control the operation of the Apache server process as a
           -#     whole (the 'global environment').
           -#  2. Directives that define the parameters of the 'main' or 'default' server,
           -#     which responds to requests that aren't handled by a virtual host.
           -#     These directives also provide default values for the settings
           -#     of all virtual hosts.
           -#  3. Settings for virtual hosts, which allow Web requests to be sent to
           -#     different IP addresses or hostnames and have them handled by the
           -#     same Apache server process.
           -#
           -# Configuration and logfile names: If the filenames you specify for many
           -# of the server's control files begin with "/" (or "drive:/" for Win32), the
           -# server will use that explicit path.  If the filenames do *not* begin
       
           -# with ServerRoot set to "/etc/apache2" will be interpreted by the
           -# server as "/etc/apache2/foo.log".
           -#
           +# Based on the Ubuntu apache2.conf
            
           -### Section 1: Global Environment
           -#
           -# The directives in this section affect the overall operation of Apache,
           -# such as the number of concurrent requests it can handle or where it
       -# can find its configuration files.
           -#
           +ServerRoot "/etc/apache2"
            
            #
           -# ServerRoot: The top of the directory tree under which the server's
           -# configuration, error, and log files are kept.
           -#
           -# NOTE!  If you intend to place this on an NFS (or otherwise network)
           -# mounted filesystem then please read the LockFile documentation (available
           -# at <URL:http://httpd.apache.org/docs/2.2/mod/mpm_common.html#lockfile>);
           -# you will save yourself a lot of trouble.
           -#
           -# Do NOT add a slash at the end of the directory path.
           -#
           -#ServerRoot "/etc/apache2"
           -
           -#
            # The accept serialization lock file MUST BE STORED ON A LOCAL DISK.
            #
           -LockFile ${APACHE_LOCK_DIR}/accept.lock
           +LockFile /var/lock/apache2/accept.lock
            
            #
            # PidFile: The file in which the server should record its process
            # identification number when it starts.
           -# This needs to be set in /etc/apache2/envvars
            #
           -PidFile ${APACHE_PID_FILE}
           +PidFile /var/run/apache2.pid
            
            #
            # Timeout: The number of seconds before receives and sends time out.
           @@ -85,65 +40,12 @@
            #
            KeepAliveTimeout 5
            
           -##
           -## Server-Pool Size Regulation (MPM specific)
           -## 
           +#<IfModule unixd_module>
           +User www-data
           +Group www-data
           +#</IfModule>
            
           -# prefork MPM
           -# StartServers: number of server processes to start
           -# MinSpareServers: minimum number of server processes which are kept spare
           -# MaxSpareServers: maximum number of server processes which are kept spare
           -# MaxClients: maximum number of server processes allowed to start
           -# MaxRequestsPerChild: maximum number of requests a server process serves
           -<IfModule mpm_prefork_module>
           -    StartServers          5
           -    MinSpareServers       5
           -    MaxSpareServers      10
           -    MaxClients          150
           -    MaxRequestsPerChild   0
           -</IfModule>
            
           -# worker MPM
           -# StartServers: initial number of server processes to start
           -# MinSpareThreads: minimum number of worker threads which are kept spare
           -# MaxSpareThreads: maximum number of worker threads which are kept spare
           -# ThreadLimit: ThreadsPerChild can be changed to this maximum value during a
           -#              graceful restart. ThreadLimit can only be changed by stopping
           -#              and starting Apache.
           -# ThreadsPerChild: constant number of worker threads in each server process
           -# MaxClients: maximum number of simultaneous client connections
           -# MaxRequestsPerChild: maximum number of requests a server process serves
           -<IfModule mpm_worker_module>
           -    StartServers          2
           -    MinSpareThreads      25
           -    MaxSpareThreads      75 
           -    ThreadLimit          64
           -    ThreadsPerChild      25
           -    MaxClients          150
           -    MaxRequestsPerChild   0
           -</IfModule>
           -
           -# event MPM
           -# StartServers: initial number of server processes to start
           -# MinSpareThreads: minimum number of worker threads which are kept spare
           -# MaxSpareThreads: maximum number of worker threads which are kept spare
           -# ThreadsPerChild: constant number of worker threads in each server process
           -# MaxClients: maximum number of simultaneous client connections
           -# MaxRequestsPerChild: maximum number of requests a server process serves
           -<IfModule mpm_event_module>
           -    StartServers          2
           -    MinSpareThreads      25
           -    MaxSpareThreads      75 
           -    ThreadLimit          64
           -    ThreadsPerChild      25
           -    MaxClients          150
           -    MaxRequestsPerChild   0
           -</IfModule>
           -
           -# These need to be set in /etc/apache2/envvars
           -User ${APACHE_RUN_USER}
           -Group ${APACHE_RUN_GROUP}
           -
            #
            # AccessFileName: The name of the file to look for in each directory
            # for additional configuration directives.  See also the AllowOverride
           @@ -153,13 +55,12 @@
            AccessFileName .htaccess
            
            #
           -# The following lines prevent .htaccess and .htpasswd files from being 
           -# viewed by Web clients. 
           +# The following lines prevent .htaccess and .htpasswd files from being
           +# viewed by Web clients.
            #
            <Files ~ "^\.ht">
         Order allow,deny
         Deny from all
           -    Satisfy all
            </Files>
            
            #
           @@ -171,16 +72,8 @@
            # keep browsers from trying to display binary files as though they are
            # text.
            #
           -# It is also possible to omit any default MIME type and let the
       ad. Typically the
           -# browser will decide based on the file's extension then. In cases
           -# where no good assumption can be made, letting the default MIME type
           -# unset is suggested  instead of forcing the browser to accept
           -# incorrect  metadata.
           -#
           -DefaultType None
           +DefaultType text/plain
            
           -
            #
            # HostnameLookups: Log the names of clients or just their IP addresses
            # e.g., www.apache.org (on) or 204.62.129.132 (off).
           @@ -197,7 +90,7 @@
            # logged here.  If you *do* define an error logfile for a <VirtualHost>
            # container, that host's errors will be logged there and not here.
            #
           -ErrorLog ${APACHE_LOG_DIR}/error.log
           +ErrorLog /var/log/apache2/error.log
            
            #
            # LogLevel: Control the number of messages logged to the error_log.
           @@ -206,33 +99,93 @@
            #
            LogLevel warn
            
           +# COOK-1021: Dummy LoadModule directive to aid module installations
           +#LoadModule dummy_module modules/mod_dummy.so
           +
            # Include module configuration:
           -Include mods-enabled/*.load
           -Include mods-enabled/*.conf
           +Include /etc/apache2/mods-enabled/*.load
           +Include /etc/apache2/mods-enabled/*.conf
            
           -# Include all the user configurations:
           -Include httpd.conf
            
            # Include ports listing
           -Include ports.conf
           +Include /etc/apache2/ports.conf
            
           +
            #
            # The following directives define some format nicknames for use with
            # a CustomLog directive (see below).
           -# If you are behind a reverse proxy, you might want to change %h into %{X-Forwarded-For}i
            #
            LogFormat "%v:%p %h %l %u %t \"%r\" %>s %O \"%{Referer}i\" \"%{User-Agent}i\"" vhost_combined
           -LogFormat "%h %l %u %t \"%r\" %>s %O \"%{Referer}i\" \"%{User-Agent}i\"" combined
           -LogFormat "%h %l %u %t \"%r\" %>s %O" common
           +LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined
       
            LogFormat "%{Referer}i -> %U" referer
            LogFormat "%{User-agent}i" agent
           +#
           +# Customizable error responses come in three flavors:
           +# 1) plain text 2) local redirects 3) external redirects
           +#
           +# Some examples:
           +#ErrorDocument 500 "The server made a boo boo."
           +#ErrorDocument 404 /missing.html
           +#ErrorDocument 404 "/cgi-bin/missing_handler.pl"
           +#ErrorDocument 402 http://www.example.com/subscription_info.html
           +#
            
           -# Include of directories ignores editors' and dpkg's backup files,
           -# see README.Debian for details.
           +#
           +# Putting this all together, we can internationalize error responses.
           +#
           +# We use Alias to redirect any /error/HTTP_<error>.html.var response to
           +# our collection of by-error message multi-language collections.  We use
           +# includes to substitute the appropriate text.
           +#
           +# You can modify the messages' appearance without changing any of the
           +# default HTTP_<error>.html.var files by adding the line:
           +#
           +#   Alias /error/include/ "/your/include/path/"
           +#
           +# which allows you to create your own set of files by starting with the
           +# /usr/share/apache2/error/include/ files and copying them to /your/include/path/,
           +# even on a per-VirtualHost basis.  The default include files will display
           +# your Apache version number and your ServerAdmin email address regardless
           +# of the setting of ServerSignature.
           +#
           +# The internationalized error documents require mod_alias, mod_include
           +# and mod_negotiation.  To activate them, uncomment the following 30 lines.
            
           +#    Alias /error/ "/usr/share/apache2/error/"
           +#
           +#    <Directory "/usr/share/apache2/error">
           +#        AllowOverride None
           +#        Options IncludesNoExec
           +#        AddOutputFilter Includes html
           +#        AddHandler type-map var
           +#        Order allow,deny
           +#        Allow from all
           +#        LanguagePriority en cs de es fr it nl sv pt-br ro
           +#        ForceLanguagePriority Prefer Fallback
           +#    </Directory>
           +#
           +#    ErrorDocument 400 /error/HTTP_BAD_REQUEST.html.var
           +#    ErrorDocument 401 /error/HTTP_UNAUTHORIZED.html.var
           +#    ErrorDocument 403 /error/HTTP_FORBIDDEN.html.var
           +#    ErrorDocument 404 /error/HTTP_NOT_FOUND.html.var
           +#    ErrorDocument 405 /error/HTTP_METHOD_NOT_ALLOWED.html.var
           +#    ErrorDocument 408 /error/HTTP_REQUEST_TIME_OUT.html.var
           +#    ErrorDocument 410 /error/HTTP_GONE.html.var
           +#    ErrorDocument 411 /error/HTTP_LENGTH_REQUIRED.html.var
           +#    ErrorDocument 412 /error/HTTP_PRECONDITION_FAILED.html.var
           +#    ErrorDocument 413 /error/HTTP_REQUEST_ENTITY_TOO_LARGE.html.var
           +#    ErrorDocument 414 /error/HTTP_REQUEST_URI_TOO_LARGE.html.var
           +#    ErrorDocument 415 /error/HTTP_UNSUPPORTED_MEDIA_TYPE.html.var
           +#    ErrorDocument 500 /error/HTTP_INTERNAL_SERVER_ERROR.html.var
           +#    ErrorDocument 501 /error/HTTP_NOT_IMPLEMENTED.html.var
           +#    ErrorDocument 502 /error/HTTP_BAD_GATEWAY.html.var
           +#    ErrorDocument 503 /error/HTTP_SERVICE_UNAVAILABLE.html.var
           +#    ErrorDocument 506 /error/HTTP_VARIANT_ALSO_VARIES.html.var
           +
            # Include generic snippets of statements
           -Include conf.d/
           +Include /etc/apache2/conf-enabled/*.conf
            
            # Include the virtual host configurations:
           -Include sites-enabled/
           +Include /etc/apache2/sites-enabled/*.conf
         * file[/etc/apache2/conf-available/security] action delete (up to date)
         * template[/etc/apache2/conf-available/security.conf] action create
           - create new file /etc/apache2/conf-available/security.conf
           - update content in file /etc/apache2/conf-available/security.conf from none to 595bd1
           --- /etc/apache2/conf-available/security.conf	2015-04-24 08:38:20.820683859 +0000
           +++ /tmp/chef-rendered-template20150424-1339-6nfdyi	2015-04-24 08:38:20.820683859 +0000
           @@ -1 +1,46 @@
           +#
           +# Disable access to the entire file system except for the directories that
           +# are explicitly allowed later.
           +#
           +# This currently breaks the configurations that come with some web application
           +# Debian packages. It will be made the default for the release after lenny.
           +#
           +#<Directory />
           +#	AllowOverride None
           +#	Order Deny,Allow
           +#	Deny from all
           +#</Directory>
           +
           +# Changing the following options will not really affect the security of the
           +# server, but might make attacks slightly more difficult in some cases.
           +
           +#
           +# ServerTokens
           +# This directive configures what you return as the Server HTTP response
           +# Header. The default is 'Full' which sends information about the OS-Type
           +# and compiled in modules.
           +# Set to one of:  Full | OS | Minimal | Minor | Major | Prod
           +# where Full conveys the most information, and Prod the least.
           +#
           +ServerTokens Prod
           +
           +#
           +# Optionally add a line containing the server version and virtual host
           +# name to server-generated pages (internal error documents, FTP directory
           +# listings, mod_status and mod_info output etc., but not CGI generated
           +# documents or custom error documents).
           +# Set to "EMail" to also include a mailto: link to the ServerAdmin.
           +# Set to one of:  On | Off | EMail
           +#
           +ServerSignature On
           +
           +#
           +# Allow TRACE method
           +#
           +# Set to "extended" to also reflect the request body (only for testing and
           +# diagnostic purposes).
           +#
           +# Set to one of:  On | Off | extended
           +#
           +TraceEnable Off
           - change mode from '' to '0644'
           - change owner from '' to 'root'
           - change group from '' to 'root'
         * execute[a2enconf security.conf] action run
           - execute /usr/sbin/a2enconf security.conf
         * file[/etc/apache2/conf-available/charset] action delete (up to date)
         * template[/etc/apache2/conf-available/charset.conf] action create
           - create new file /etc/apache2/conf-available/charset.conf
           - update content in file /etc/apache2/conf-available/charset.conf from none to 543c6c
           --- /etc/apache2/conf-available/charset.conf	2015-04-24 08:38:22.512662589 +0000
           +++ /tmp/chef-rendered-template20150424-1339-28auj8	2015-04-24 08:38:22.508662640 +0000
           @@ -1 +1,7 @@
           +# Read the documentation before enabling AddDefaultCharset.
           +# In general, it is only a good idea if you know that all your files
           +# have this encoding. It will override any encoding given in the files
           +# in meta http-equiv or xml encoding tags.
           +
           +#AddDefaultCharset UTF-8
           - change mode from '' to '0644'
           - change owner from '' to 'root'
           - change group from '' to 'root'
         * execute[a2enconf charset.conf] action run
           - execute /usr/sbin/a2enconf charset.conf
         * file[/etc/apache2/ports] action delete (up to date)
         * template[/etc/apache2/ports.conf] action create
           - update content in file /etc/apache2/ports.conf from 69cde6 to 251243
           --- /etc/apache2/ports.conf	2012-02-07 04:16:59.000000000 +0000
           +++ /tmp/chef-rendered-template20150424-1339-fqm8j5	2015-04-24 08:38:23.480650420 +0000
           @@ -1,24 +1,6 @@
           -# If you just change the port or add more ports here, you will likely also
           -# have to change the VirtualHost statement in
           -# /etc/apache2/sites-enabled/000-default
           -# This is also true if you have upgraded from before 2.2.9-3 (i.e. from
           -# Debian etch). See /usr/share/doc/apache2.2-common/NEWS.Debian.gz and
           -# README.Debian.gz
           +# This file was generated by Chef for default-precise32.
           +# Do NOT modify this file by hand!
            
           +Listen *:80
            NameVirtualHost *:80
           -Listen 80
           -
           -<IfModule mod_ssl.c>
           -    # If you add NameVirtualHost *:443 here, you will also have to change
           -    # the VirtualHost statement in /etc/apache2/sites-available/default-ssl
           -    # to <VirtualHost *:443>
           -    # Server Name Indication for SSL named virtual hosts is currently not
           -    # supported by MSIE on Windows XP.
           -    Listen 443
           -</IfModule>
       
           -<IfModule mod_gnutls.c>
           -    Listen 443
           -</IfModule>
           -
       Recipe: apache2::mod_status
         * template[/etc/apache2/mods-available/status.conf] action create
           - update content in file /etc/apache2/mods-available/status.conf from 5f6b3c to 7736cd
           --- /etc/apache2/mods-available/status.conf	2012-02-07 04:16:59.000000000 +0000
           +++ /tmp/chef-rendered-template20150424-1339-1ryd7lm	2015-04-24 08:38:23.620648659 +0000
           @@ -1,31 +1,23 @@
            <IfModule mod_status.c>
           -#
           -# Allow server status reports generated by mod_status,
           -# with the URL of http://servername/server-status
           -# Uncomment and change the "192.0.2.0/24" to allow access from other hosts.
           -#
           -<Location /server-status>
           +  #
           +  # Allow server status reports generated by mod_status,
           +  # with the URL of http://servername/server-status
           +  # Uncomment and change the ".example.com" to allow
           +  # access from other hosts.
           +  #
           +  <Location /server-status>
         SetHandler server-status
         Order deny,allow
         Deny from all
         Allow from 127.0.0.1 ::1
           -#    Allow from 192.0.2.0/24
           -</Location>
           +  </Location>
            
           -# Keep track of extended status information for each request
           -ExtendedStatus On
           -
           -# Determine if mod_status displays the first 63 characters of a request or
           -# the last 63, assuming the request itself is greater than 63 chars.
           -# Default: Off
           -#SeeRequestTail On
           -
           -
           -<IfModule mod_proxy.c>
           -    # Show Proxy LoadBalancer status in mod_status
           -    ProxyStatus On
           -</IfModule>
           -
           +  #
           +  # ExtendedStatus controls whether Apache will generate "full" status
           +  # information (ExtendedStatus On) or just basic information (ExtendedStatus
           +  # Off) when the "server-status" handler is called. The default is Off.
           +  #
           +  ExtendedStatus Off
            
            </IfModule>
         * file[/etc/apache2/mods-available/status.load] action create (up to date)
         * execute[a2enmod status] action run (skipped due to not_if)
       Recipe: apache2::mod_alias
         * template[/etc/apache2/mods-available/alias.conf] action create
           - update content in file /etc/apache2/mods-available/alias.conf from 541075 to 43605a
           --- /etc/apache2/mods-available/alias.conf	2012-02-07 04:16:59.000000000 +0000
           +++ /tmp/chef-rendered-template20150424-1339-lpjp2q	2015-04-24 08:38:23.804646346 +0000
           @@ -1,25 +1,24 @@
            <IfModule alias_module>
           -#
           -# Aliases: Add here as many aliases as you need (with no limit). The format is 
           -# Alias fakename realname
           -#
           -# Note that if you include a trailing / on fakename then the server will
           -# require it to be present in the URL.  So "/icons" isn't aliased in this
           -# example, only "/icons/".  If the fakename is slash-terminated, then the 
           -# realname must also be slash terminated, and if the fakename omits the 
           -# trailing slash, the realname must also omit it.
           -#
           -# We include the /icons/ alias for FancyIndexed directory listings.  If
           -# you do not use FancyIndexing, you may comment this out.
           -#
           -Alias /icons/ "/usr/share/apache2/icons/"
           +  #
           +  # Aliases: Add here as many aliases as you need (with no limit). The format is
           +  # Alias fakename realname
           +  #
           +  # Note that if you include a trailing / on fakename then the server will
           +  # require it to be present in the URL.  So "/icons" isn't aliased in this
           +  # example, only "/icons/".  If the fakename is slash-terminated, then the
           +  # realname must also be slash terminated, and if the fakename omits the
           +  # trailing slash, the realname must also omit it.
           +  #
           +  # We include the /icons/ alias for FancyIndexed directory listings.  If
           +  # you do not use FancyIndexing, you may comment this out.
           +  #
           +  Alias /icons/ "/usr/share/apache2/icons/"
       
           -<Directory "/usr/share/apache2/icons">
           -    Options FollowSymlinks
           +  <Directory "/usr/share/apache2/icons">
           +    Options Indexes MultiViews
         AllowOverride None
         Order allow,deny
         Allow from all
           -</Directory>
           -
           +  </Directory>
            </IfModule>
         * file[/etc/apache2/mods-available/alias.load] action create (up to date)
         * execute[a2enmod alias] action run (skipped due to not_if)
       Recipe: apache2::mod_auth_basic
         * file[/etc/apache2/mods-available/auth_basic.load] action create (up to date)
         * execute[a2enmod auth_basic] action run (skipped due to not_if)
       Recipe: apache2::mod_authn_file
         * file[/etc/apache2/mods-available/authn_file.load] action create (up to date)
         * execute[a2enmod authn_file] action run (skipped due to not_if)
       Recipe: apache2::mod_authz_core
         * file[/etc/apache2/mods-available/authz_default.load] action create (up to date)
         * execute[a2enmod authz_default] action run (skipped due to not_if)
       Recipe: apache2::mod_authz_groupfile
         * file[/etc/apache2/mods-available/authz_groupfile.load] action create (up to date)
         * execute[a2enmod authz_groupfile] action run (skipped due to not_if)
       Recipe: apache2::mod_authz_host
         * file[/etc/apache2/mods-available/authz_host.load] action create (up to date)
         * execute[a2enmod authz_host] action run (skipped due to not_if)
       Recipe: apache2::mod_authz_user
         * file[/etc/apache2/mods-available/authz_user.load] action create (up to date)
         * execute[a2enmod authz_user] action run (skipped due to not_if)
       Recipe: apache2::mod_autoindex
         * template[/etc/apache2/mods-available/autoindex.conf] action create
           - update content in file /etc/apache2/mods-available/autoindex.conf from e9cb73 to 8e7e44
           --- /etc/apache2/mods-available/autoindex.conf	2012-02-07 04:16:59.000000000 +0000
           +++ /tmp/chef-rendered-template20150424-1339-1nkwebd	2015-04-24 08:38:24.100642624 +0000
           @@ -1,102 +1,101 @@
            <IfModule mod_autoindex.c>
           -#
           -# Directives controlling the display of server-generated directory listings.
           -#
       +  #
           +  # Directives controlling the display of server-generated directory listings.
           +  #
            
       -#
           -# IndexOptions: Controls the appearance of server-generated directory
           -# listings.
           -# Remove/replace the "Charset=UTF-8" if you don't use UTF-8 for your filenames.
           -#
           -IndexOptions FancyIndexing VersionSort HTMLTable NameWidth=* DescriptionWidth=* Charset=UTF-8
           +  #
           +  # IndexOptions: Controls the appearance of server-generated directory
           +  # listings.
           +  # Remove/replace the "Charset=UTF-8" if you don't use UTF-8 for your filenames.
           +  #
           +  IndexOptions FancyIndexing VersionSort HTMLTable NameWidth=* DescriptionWidth=* Charset=UTF-8
            
           -#
           -# AddIcon* directives tell the server which icon to show for different
           -# files or filename extensions.  These are only displayed for
           -# FancyIndexed directories.
           -#
           -AddIconByEncoding (CMP,/icons/compressed.gif) x-compress x-gzip x-bzip2
           +  #
           +  # AddIcon* directives tell the server which icon to show for different
           +  # files or filename extensions.  These are only displayed for
           +  # FancyIndexed directories.
           +  #
           +  AddIconByEncoding (CMP,/icons/compressed.gif) x-compress x-gzip x-bzip2
            
           -AddIconByType (TXT,/icons/text.gif) text/*
           -AddIconByType (IMG,/icons/image2.gif) image/*
           -AddIconByType (SND,/icons/sound2.gif) audio/*
           -AddIconByType (VID,/icons/movie.gif) video/*
           +  AddIconByType (TXT,/icons/text.gif) text/*
           +  AddIconByType (IMG,/icons/image2.gif) image/*
           +  AddIconByType (SND,/icons/sound2.gif) audio/*
           +  AddIconByType (VID,/icons/movie.gif) video/*
            
           -AddIcon /icons/binary.gif .bin .exe
           -AddIcon /icons/binhex.gif .hqx
           -AddIcon /icons/tar.gif .tar
           -AddIcon /icons/world2.gif .wrl .wrl.gz .vrml .vrm .iv
           -AddIcon /icons/compressed.gif .Z .z .tgz .gz .zip
           -AddIcon /icons/a.gif .ps .ai .eps
           -AddIcon /icons/layout.gif .html .shtml .htm .pdf
           -AddIcon /icons/text.gif .txt
           -AddIcon /icons/c.gif .c
           -AddIcon /icons/p.gif .pl .py
           -AddIcon /icons/f.gif .for
           -AddIcon /icons/dvi.gif .dvi
           -AddIcon /icons/uuencoded.gif .uu
           -AddIcon /icons/script.gif .conf .sh .shar .csh .ksh .tcl
           -AddIcon /icons/tex.gif .tex
           -# It's a suffix rule, so simply matching "core" matches "score" as well !
           -AddIcon /icons/bomb.gif /core
           -AddIcon (SND,/icons/sound2.gif) .ogg
           -AddIcon (VID,/icons/movie.gif) .ogm
           +  AddIcon /icons/binary.gif .bin .exe
           +  AddIcon /icons/binhex.gif .hqx
           +  AddIcon /icons/tar.gif .tar
           +  AddIcon /icons/world2.gif .wrl .wrl.gz .vrml .vrm .iv
           +  AddIcon /icons/compressed.gif .Z .z .tgz .gz .zip
           +  AddIcon /icons/a.gif .ps .ai .eps
           +  AddIcon /icons/layout.gif .html .shtml .htm .pdf
           +  AddIcon /icons/text.gif .txt
           +  AddIcon /icons/c.gif .c
           +  AddIcon /icons/p.gif .pl .py
           +  AddIcon /icons/f.gif .for
           +  AddIcon /icons/dvi.gif .dvi
           +  AddIcon /icons/uuencoded.gif .uu
           +  AddIcon /icons/script.gif .conf .sh .shar .csh .ksh .tcl
           +  AddIcon /icons/tex.gif .tex
           +  # It's a suffix rule, so simply matching "core" matches "score" as well !
           +  AddIcon /icons/bomb.gif /core
           +  AddIcon (SND,/icons/sound2.gif) .ogg
           +  AddIcon (VID,/icons/movie.gif) .ogm
            
           -AddIcon /icons/back.gif ..
           -AddIcon /icons/hand.right.gif README
           -AddIcon /icons/folder.gif ^^DIRECTORY^^
           -AddIcon /icons/blank.gif ^^BLANKICON^^
           +  AddIcon /icons/back.gif ..
           +  AddIcon /icons/hand.right.gif README
           +  AddIcon /icons/folder.gif ^^DIRECTORY^^
           +  AddIcon /icons/blank.gif ^^BLANKICON^^
            
           -# Default icons for OpenDocument format
           -AddIcon /icons/odf6odt-20x22.png .odt
           -AddIcon /icons/odf6ods-20x22.png .ods
           -AddIcon /icons/odf6odp-20x22.png .odp
           -AddIcon /icons/odf6odg-20x22.png .odg
           -AddIcon /icons/odf6odc-20x22.png .odc
           -AddIcon /icons/odf6odf-20x22.png .odf
           -AddIcon /icons/odf6odb-20x22.png .odb
           -AddIcon /icons/odf6odi-20x22.png .odi
           -AddIcon /icons/odf6odm-20x22.png .odm
           +  # Default icons for OpenDocument format
           +  AddIcon /icons/odf6odt-20x22.png .odt
           +  AddIcon /icons/odf6ods-20x22.png .ods
           +  AddIcon /icons/odf6odp-20x22.png .odp
           +  AddIcon /icons/odf6odg-20x22.png .odg
           +  AddIcon /icons/odf6odc-20x22.png .odc
           +  AddIcon /icons/odf6odf-20x22.png .odf
           +  AddIcon /icons/odf6odb-20x22.png .odb
           +  AddIcon /icons/odf6odi-20x22.png .odi
           +  AddIcon /icons/odf6odm-20x22.png .odm
            
           -AddIcon /icons/odf6ott-20x22.png .ott
           -AddIcon /icons/odf6ots-20x22.png .ots
           -AddIcon /icons/odf6otp-20x22.png .otp
           -AddIcon /icons/odf6otg-20x22.png .otg
           -AddIcon /icons/odf6otc-20x22.png .otc
           -AddIcon /icons/odf6otf-20x22.png .otf
           -AddIcon /icons/odf6oti-20x22.png .oti
           -AddIcon /icons/odf6oth-20x22.png .oth
           +  AddIcon /icons/odf6ott-20x22.png .ott
           +  AddIcon /icons/odf6ots-20x22.png .ots
           +  AddIcon /icons/odf6otp-20x22.png .otp
           +  AddIcon /icons/odf6otg-20x22.png .otg
           +  AddIcon /icons/odf6otc-20x22.png .otc
           +  AddIcon /icons/odf6otf-20x22.png .otf
           +  AddIcon /icons/odf6oti-20x22.png .oti
           +  AddIcon /icons/odf6oth-20x22.png .oth
            
           -#
           -# DefaultIcon is which icon to show for files which do not have an icon
           -# explicitly set.
           -#
           -DefaultIcon /icons/unknown.gif
           +  #
           +  # DefaultIcon is which icon to show for files which do not have an icon
           +  # explicitly set.
           +  #
           +  DefaultIcon /icons/unknown.gif
            
           -#
           -# AddDescription allows you to place a short description after a file in
           -# server-generated indexes.  These are only displayed for FancyIndexed
           -# directories.
           -# Format: AddDescription "description" filename
           -#
           -#AddDescription "GZIP compressed document" .gz
           -#AddDescription "tar archive" .tar
           -#AddDescription "GZIP compressed tar archive" .tgz
           +  #
           +  # AddDescription allows you to place a short description after a file in
           +  # server-generated indexes.  These are only displayed for FancyIndexed
           +  # directories.
           +  # Format: AddDescription "description" filename
           +  #
           +  #AddDescription "GZIP compressed document" .gz
           +  #AddDescription "tar archive" .tar
           +  #AddDescription "GZIP compressed tar archive" .tgz
            
           -#
           -# ReadmeName is the name of the README file the server will look for by
           -# default, and append to directory listings.
           -#
           -# HeaderName is the name of a file which should be prepended to
           -# directory indexes. 
           -ReadmeName README.html
           -HeaderName HEADER.html
           +  #
           +  # ReadmeName is the name of the README file the server will look for by
           +  # default, and append to directory listings.
           +  #
           +  # HeaderName is the name of a file which should be prepended to
           +  # directory indexes.
           +  ReadmeName README.html
           +  HeaderName HEADER.html
            
           -#
           -# IndexIgnore is a set of filenames which directory indexing should ignore
           -# and not include in the listing.  Shell-style wildcarding is permitted.
           -#
           -IndexIgnore .??* *~ *# RCS CVS *,v *,t 
           -
           +  #
           +  # IndexIgnore is a set of filenames which directory indexing should ignore
           +  # and not include in the listing.  Shell-style wildcarding is permitted.
           +  #
           +  IndexIgnore .??* *~ *# RCS CVS *,v *,t
            </IfModule>
         * file[/etc/apache2/mods-available/autoindex.load] action create (up to date)
         * execute[a2enmod autoindex] action run (skipped due to not_if)
       Recipe: apache2::mod_dir
         * template[/etc/apache2/mods-available/dir.conf] action create
           - update content in file /etc/apache2/mods-available/dir.conf from f8a5bd to 5d2651
           --- /etc/apache2/mods-available/dir.conf	2012-02-07 04:17:00.000000000 +0000
           +++ /tmp/chef-rendered-template20150424-1339-1n57gwz	2015-04-24 08:38:24.620636089 +0000
           @@ -1,6 +1,4 @@
            <IfModule mod_dir.c>
           -
           -          DirectoryIndex index.html index.cgi index.pl index.php index.xhtml index.htm
           -
           +  DirectoryIndex index.html index.cgi index.pl index.php index.xhtml index.htm
            </IfModule>
         * file[/etc/apache2/mods-available/dir.load] action create (up to date)
         * execute[a2enmod dir] action run (skipped due to not_if)
       Recipe: apache2::mod_env
         * file[/etc/apache2/mods-available/env.load] action create (up to date)
         * execute[a2enmod env] action run (skipped due to not_if)
       Recipe: apache2::mod_mime
         * template[/etc/apache2/mods-available/mime.conf] action create
           - update content in file /etc/apache2/mods-available/mime.conf from 43438f to 76e7d0
           --- /etc/apache2/mods-available/mime.conf	2012-02-07 04:16:59.000000000 +0000
           +++ /tmp/chef-rendered-template20150424-1339-8buot6	2015-04-24 08:38:24.692635184 +0000
           @@ -1,247 +1,193 @@
            <IfModule mod_mime.c>
           +  #
           +  # TypesConfig points to the file containing the list of mappings from
           +  # filename extension to MIME-type.
           +  #
           +  TypesConfig /etc/mime.types
            
           -#
           -# TypesConfig points to the file containing the list of mappings from
           -# filename extension to MIME-type.
           -#
           -TypesConfig /etc/mime.types
           +  #
           +  # AddType allows you to add to or override the MIME configuration
           +  # file mime.types for specific file types.
           +  #
           +  #AddType application/x-gzip .tgz
           +  #
           +  # AddEncoding allows you to have certain browsers uncompress
           +  # information on the fly. Note: Not all browsers support this.
           +  # Despite the name similarity, the following Add* directives have
       +  # nothing to do with the FancyIndexing customization directives above.
           +  #
           +  #AddEncoding x-compress .Z
       
       +  #AddEncoding x-bzip2 .bz2
           +  #
           +  # If the AddEncoding directives above are commented-out, then you
       +  # probably should define those extensions to indicate media types:
           +  #
           +  AddType application/x-compress .Z
           +  AddType application/x-gzip .gz .tgz
           +  AddType application/x-bzip2 .bz2
            
           -#
           -# AddType allows you to add to or override the MIME configuration
           -# file mime.types for specific file types.
           -#
           -#AddType application/x-gzip .tgz
           -#
           -# AddEncoding allows you to have certain browsers uncompress
       -# information on the fly. Note: Not all browsers support this.
           -# Despite the name similarity, the following Add* directives have
           -# nothing to do with the FancyIndexing customization directives above.
           -#
       -#AddEncoding x-compress .Z
       -#AddEncoding x-gzip .gz .tgz
       -#AddEncoding x-bzip2 .bz2
           -#
           -# If the AddEncoding directives above are commented-out, then you
           -# probably should define those extensions to indicate media types:
           -#
           -AddType application/x-compress .Z
           -AddType application/x-gzip .gz .tgz
           -AddType application/x-bzip2 .bz2
           +  AddType image/svg+xml svg svgz
           +  AddEncoding gzip svgz
            
           -#
           -# DefaultLanguage and AddLanguage allows you to specify the language of 
           -# a document. You can then use content negotiation to give a browser a 
           -# file in a language the user can understand.
           -#
           -# Specify a default language. This means that all data
           -# going out without a specific language tag (see below) will 
           -# be marked with this one. You probably do NOT want to set
           -# this unless you are sure it is correct for all cases.
           -#
           -# * It is generally better to not mark a page as 
           -# * being a certain language than marking it with the wrong
           -# * language!
           -#
           -# DefaultLanguage nl
           -#
           -# Note 1: The suffix does not have to be the same as the language
           -# keyword --- those with documents in Polish (whose net-standard
           -# language code is pl) may wish to use "AddLanguage pl .po" to
           -# avoid the ambiguity with the common suffix for perl scripts.
           -#
           -# Note 2: The example entries below illustrate that in some cases 
           -# the two character 'Language' abbreviation is not identical to 
           -# the two character 'Country' code for its country,
           -# E.g. 'Danmark/dk' versus 'Danish/da'.
           -#
           -# Note 3: In the case of 'ltz' we violate the RFC by using a three char
           -# specifier. There is 'work in progress' to fix this and get
           -# the reference data for rfc1766 cleaned up.
           -#
           -# Catalan (ca) - Croatian (hr) - Czech (cs) - Danish (da) - Dutch (nl)
           -# English (en) - Esperanto (eo) - Estonian (et) - French (fr) - German (de)
           -# Greek-Modern (el) - Hebrew (he) - Italian (it) - Japanese (ja)
           -# Korean (ko) - Luxembourgeois* (ltz) - Norwegian Nynorsk (nn)
           -# Norwegian (no) - Polish (pl) - Portugese (pt)
           -# Brazilian Portuguese (pt-BR) - Russian (ru) - Swedish (sv)
           -# Simplified Chinese (zh-CN) - Spanish (es) - Traditional Chinese (zh-TW)
           -#
           -AddLanguage am .amh
           -AddLanguage ar .ara
           -AddLanguage be .be
           -AddLanguage bg .bg
           -AddLanguage bn .bn
           -AddLanguage br .br
           -AddLanguage bs .bs
           -AddLanguage ca .ca
           -AddLanguage cs .cz .cs
           -AddLanguage cy .cy
           -AddLanguage da .dk
           -AddLanguage de .de
           -AddLanguage dz .dz
           -AddLanguage el .el
           -AddLanguage en .en
           -AddLanguage eo .eo
           -# es is ecmascript in /etc/mime.types
           -RemoveType  es
           -AddLanguage es .es
           -AddLanguage et .et
           -AddLanguage eu .eu
           -AddLanguage fa .fa
           -AddLanguage fi .fi
           -AddLanguage fr .fr
           -AddLanguage ga .ga
           -AddLanguage gl .glg
           -AddLanguage gu .gu
           -AddLanguage he .he
           -AddLanguage hi .hi
           -AddLanguage hr .hr
           -AddLanguage hu .hu
       
           -AddLanguage id .id
           -AddLanguage is .is
           -AddLanguage it .it
           -AddLanguage ja .ja
           -AddLanguage ka .ka
           -AddLanguage kk .kk
           -AddLanguage km .km
           -AddLanguage kn .kn
           -AddLanguage ko .ko
           -AddLanguage ku .ku
           -AddLanguage lo .lo
           -AddLanguage lt .lt
           -AddLanguage ltz .ltz
           -AddLanguage lv .lv
           -AddLanguage mg .mg
           -AddLanguage mk .mk
           -AddLanguage ml .ml
           -AddLanguage mr .mr
           -AddLanguage ms .msa
           -AddLanguage nb .nob
           -AddLanguage ne .ne
           -AddLanguage nl .nl
           -AddLanguage nn .nn
           -AddLanguage no .no
           -AddLanguage pa .pa
           -AddLanguage pl .po
           -AddLanguage pt-BR .pt-br
           -AddLanguage pt .pt
           -AddLanguage ro .ro
           -AddLanguage ru .ru
           -AddLanguage sa .sa
           -AddLanguage se .se
           -AddLanguage si .si
           -AddLanguage sk .sk
           -AddLanguage sl .sl
           -AddLanguage sq .sq
           -AddLanguage sr .sr
           -AddLanguage sv .sv
           -AddLanguage ta .ta
           -AddLanguage te .te
           -AddLanguage th .th
           -AddLanguage tl .tl
           -RemoveType  tr
           -# tr is troff in /etc/mime.types
           -AddLanguage tr .tr
           -AddLanguage uk .uk
           -AddLanguage ur .ur
           -AddLanguage vi .vi
           -AddLanguage wo .wo
           -AddLanguage xh .xh
           -AddLanguage zh-CN .zh-cn
           -AddLanguage zh-TW .zh-tw
           +  #
           +  # DefaultLanguage and AddLanguage allows you to specify the language of
           +  # a document. You can then use content negotiation to give a browser a
           +  # file in a language the user can understand.
           +  #
           +  # Specify a default language. This means that all data
           +  # going out without a specific language tag (see below) will
           +  # be marked with this one. You probably do NOT want to set
           +  # this unless you are sure it is correct for all cases.
           +  #
           +  # * It is generally better to not mark a page as
           +  # * being a certain language than marking it with the wrong
           +  # * language!
           +  #
           +  # DefaultLanguage nl
           +  #
           +  # Note 1: The suffix does not have to be the same as the language
           +  # keyword --- those with documents in Polish (whose net-standard
           +  # language code is pl) may wish to use "AddLanguage pl .po" to
           +  # avoid the ambiguity with the common suffix for perl scripts.
           +  #
           +  # Note 2: The example entries below illustrate that in some cases
           +  # the two character 'Language' abbreviation is not identical to
           +  # the two character 'Country' code for its country,
           +  # E.g. 'Danmark/dk' versus 'Danish/da'.
           +  #
           +  # Note 3: In the case of 'ltz' we violate the RFC by using a three char
           +  # specifier. There is 'work in progress' to fix this and get
           +  # the reference data for rfc1766 cleaned up.
           +  #
           +  # Catalan (ca) - Croatian (hr) - Czech (cs) - Danish (da) - Dutch (nl)
           +  # English (en) - Esperanto (eo) - Estonian (et) - French (fr) - German (de)
           +  # Greek-Modern (el) - Hebrew (he) - Italian (it) - Japanese (ja)
           +  # Korean (ko) - Luxembourgeois* (ltz) - Norwegian Nynorsk (nn)
           +  # Norwegian (no) - Polish (pl) - Portugese (pt)
           +  # Brazilian Portuguese (pt-BR) - Russian (ru) - Swedish (sv)
           +  # Simplified Chinese (zh-CN) - Spanish (es) - Traditional Chinese (zh-TW)
           +  #
           +  AddLanguage ca .ca
           +  AddLanguage cs .cz .cs
           +  AddLanguage da .dk
           +  AddLanguage de .de
           +  AddLanguage el .el
           +  AddLanguage en .en
           +  AddLanguage eo .eo
           +  # See README.Debian for Spanish
           +  AddLanguage es .es
           +  AddLanguage et .et
           +  AddLanguage fr .fr
           +  AddLanguage he .he
           +  AddLanguage hr .hr
           +  AddLanguage it .it
           +  AddLanguage ja .ja
           +  AddLanguage ko .ko
           +  AddLanguage ltz .ltz
           +  AddLanguage nl .nl
           +  AddLanguage nn .nn
           +  AddLanguage no .no
           +  AddLanguage pl .po
           +  AddLanguage pt .pt
           +  AddLanguage pt-BR .pt-br
           +  AddLanguage ru .ru
           +  AddLanguage sv .sv
           +  # See README.Debian for Turkish
           +  AddLanguage tr .tr
           +  AddLanguage zh-CN .zh-cn
           +  AddLanguage zh-TW .zh-tw
            
           -#
           -# Commonly used filename extensions to character sets. You probably
           -# want to avoid clashes with the language extensions, unless you
           -# are good at carefully testing your setup after each change.
           -# See http://www.iana.org/assignments/character-sets for the
           -# official list of charset names and their respective RFCs.
           -#
           -AddCharset us-ascii    .ascii .us-ascii
           -AddCharset ISO-8859-1  .iso8859-1  .latin1
           -AddCharset ISO-8859-2  .iso8859-2  .latin2 .cen
           -AddCharset ISO-8859-3  .iso8859-3  .latin3
           -AddCharset ISO-8859-4  .iso8859-4  .latin4
           -AddCharset ISO-8859-5  .iso8859-5  .cyr .iso-ru
           -AddCharset ISO-8859-6  .iso8859-6  .arb .arabic
           -AddCharset ISO-8859-7  .iso8859-7  .grk .greek
           -AddCharset ISO-8859-8  .iso8859-8  .heb .hebrew
           -AddCharset ISO-8859-9  .iso8859-9  .latin5 .trk
           -AddCharset ISO-8859-10  .iso8859-10  .latin6
           -AddCharset ISO-8859-13  .iso8859-13
           -AddCharset ISO-8859-14  .iso8859-14  .latin8
           -AddCharset ISO-8859-15  .iso8859-15  .latin9
           -AddCharset ISO-8859-16  .iso8859-16  .latin10
           -AddCharset ISO-2022-JP .iso2022-jp .jis
           -AddCharset ISO-2022-KR .iso2022-kr .kis
           -AddCharset ISO-2022-CN .iso2022-cn .cis
           -AddCharset Big5        .Big5       .big5 .b5
           -AddCharset cn-Big5     .cn-big5
           -# For russian, more than one charset is used (depends on client, mostly):
           -AddCharset WINDOWS-1251 .cp-1251   .win-1251
           -AddCharset CP866       .cp866
           -AddCharset KOI8      .koi8
           -AddCharset KOI8-E      .koi8-e
           -AddCharset KOI8-r      .koi8-r .koi8-ru
           -AddCharset KOI8-U      .koi8-u
           -AddCharset KOI8-ru     .koi8-uk .ua
           -AddCharset ISO-10646-UCS-2 .ucs2
           -AddCharset ISO-10646-UCS-4 .ucs4
           -AddCharset UTF-7       .utf7
           -AddCharset UTF-8       .utf8
           -AddCharset UTF-16      .utf16
           -AddCharset UTF-16BE    .utf16be
           -AddCharset UTF-16LE    .utf16le
           -AddCharset UTF-32      .utf32
           -AddCharset UTF-32BE    .utf32be
           -AddCharset UTF-32LE    .utf32le
           -AddCharset euc-cn      .euc-cn
           -AddCharset euc-gb      .euc-gb
           -AddCharset euc-jp      .euc-jp
           -AddCharset euc-kr      .euc-kr
           -#Not sure how euc-tw got in - IANA doesn't list it???
           -AddCharset EUC-TW      .euc-tw
           -AddCharset gb2312      .gb2312 .gb
           -AddCharset iso-10646-ucs-2 .ucs-2 .iso-10646-ucs-2
           -AddCharset iso-10646-ucs-4 .ucs-4 .iso-10646-ucs-4
           -AddCharset shift_jis   .shift_jis .sjis
           +  #
           +  # Commonly used filename extensions to character sets. You probably
           +  # want to avoid clashes with the language extensions, unless you
           +  # are good at carefully testing your setup after each change.
           +  # See http://www.iana.org/assignments/character-sets for the
           +  # official list of charset names and their respective RFCs.
           +  #
           +  AddCharset us-ascii    .ascii .us-ascii
           +  AddCharset ISO-8859-1  .iso8859-1  .latin1
           +  AddCharset ISO-8859-2  .iso8859-2  .latin2 .cen
           +  AddCharset ISO-8859-3  .iso8859-3  .latin3
           +  AddCharset ISO-8859-4  .iso8859-4  .latin4
           +  AddCharset ISO-8859-5  .iso8859-5  .cyr .iso-ru
           +  AddCharset ISO-8859-6  .iso8859-6  .arb .arabic
           +  AddCharset ISO-8859-7  .iso8859-7  .grk .greek
           +  AddCharset ISO-8859-8  .iso8859-8  .heb .hebrew
           +  AddCharset ISO-8859-9  .iso8859-9  .latin5 .trk
           +  AddCharset ISO-8859-10  .iso8859-10  .latin6
           +  AddCharset ISO-8859-13  .iso8859-13
           +  AddCharset ISO-8859-14  .iso8859-14  .latin8
           +  AddCharset ISO-8859-15  .iso8859-15  .latin9
           +  AddCharset ISO-8859-16  .iso8859-16  .latin10
           +  AddCharset ISO-2022-JP .iso2022-jp .jis
           +  AddCharset ISO-2022-KR .iso2022-kr .kis
           +  AddCharset ISO-2022-CN .iso2022-cn .cis
           +  AddCharset Big5        .Big5       .big5 .b5
           +  AddCharset cn-Big5     .cn-big5
           +  # For russian, more than one charset is used (depends on client, mostly):
           +  AddCharset WINDOWS-1251 .cp-1251   .win-1251
           +  AddCharset CP866       .cp866
           +  AddCharset KOI8      .koi8
           +  AddCharset KOI8-E      .koi8-e
           +  AddCharset KOI8-r      .koi8-r .koi8-ru
           +  AddCharset KOI8-U      .koi8-u
           +  AddCharset KOI8-ru     .koi8-uk .ua
           +  AddCharset ISO-10646-UCS-2 .ucs2
           +  AddCharset ISO-10646-UCS-4 .ucs4
           +  AddCharset UTF-7       .utf7
           +  AddCharset UTF-8       .utf8
           +  AddCharset UTF-16      .utf16
           +  AddCharset UTF-16BE    .utf16be
           +  AddCharset UTF-16LE    .utf16le
           +  AddCharset UTF-32      .utf32
           +  AddCharset UTF-32BE    .utf32be
           +  AddCharset UTF-32LE    .utf32le
           +  AddCharset euc-cn      .euc-cn
           +  AddCharset euc-gb      .euc-gb
           +  AddCharset euc-jp      .euc-jp
           +  AddCharset euc-kr      .euc-kr
           +  #Not sure how euc-tw got in - IANA doesn't list it???
           +  AddCharset EUC-TW      .euc-tw
           +  AddCharset gb2312      .gb2312 .gb
           +  AddCharset iso-10646-ucs-2 .ucs-2 .iso-10646-ucs-2
           +  AddCharset iso-10646-ucs-4 .ucs-4 .iso-10646-ucs-4
           +  AddCharset shift_jis   .shift_jis .sjis
            
           -#
           -# AddHandler allows you to map certain file extensions to "handlers":
           -# actions unrelated to filetype. These can be either built into the server
           -# or added with the Action directive (see below)
           -#
           -# To use CGI scripts outside of ScriptAliased directories:
           -# (You will also need to add "ExecCGI" to the "Options" directive.)
           -#
           -#AddHandler cgi-script .cgi
           +  #
           +  # AddHandler allows you to map certain file extensions to "handlers":
           +  # actions unrelated to filetype. These can be either built into the server
           +  # or added with the Action directive (see below)
           +  #
           +  # To use CGI scripts outside of ScriptAliased directories:
           +  # (You will also need to add "ExecCGI" to the "Options" directive.)
           +  #
           +  #AddHandler cgi-script .cgi
            
           -#
           -# For files that include their own HTTP headers:
           -#
           -#AddHandler send-as-is asis
           +  #
           +  # For files that include their own HTTP headers:
           +  #
           +  #AddHandler send-as-is asis
            
           -#
           -# For server-parsed imagemap files:
           -#
           -#AddHandler imap-file map
           +  #
           +  # For server-parsed imagemap files:
           +  #
           +  #AddHandler imap-file map
            
           -#
           -# For type maps (negotiated resources):
           -# (This is enabled by default to allow the Apache "It Worked" page
           -#  to be distributed in multiple languages.)
           -#
           -AddHandler type-map var
           +  #
           +  # For type maps (negotiated resources):
           +  # (This is enabled by default to allow the Apache "It Worked" page
           +  #  to be distributed in multiple languages.)
           +  #
           +  AddHandler type-map var
            
           -#
           -# Filters allow you to process content before it is sent to the client.
           -#
           -# To parse .shtml files for server-side includes (SSI):
           -# (You will also need to add "Includes" to the "Options" directive.)
           -#
           -AddType text/html .shtml
           -AddOutputFilter INCLUDES .shtml
           -
           +  #
           +  # Filters allow you to process content before it is sent to the client.
           +  #
           +  # To parse .shtml files for server-side includes (SSI):
           +  # (You will also need to add "Includes" to the "Options" directive.)
           +  #
           +  AddType text/html .shtml
           +  AddOutputFilter INCLUDES .shtml
            </IfModule>
         * file[/etc/apache2/mods-available/mime.load] action create (up to date)
         * execute[a2enmod mime] action run (skipped due to not_if)
       Recipe: apache2::mod_negotiation
         * template[/etc/apache2/mods-available/negotiation.conf] action create
           - update content in file /etc/apache2/mods-available/negotiation.conf from ca1d73 to 3ad8fd
           --- /etc/apache2/mods-available/negotiation.conf	2012-02-07 04:17:00.000000000 +0000
           +++ /tmp/chef-rendered-template20150424-1339-ec82vi	2015-04-24 08:38:25.716622308 +0000
           @@ -1,19 +1,18 @@
            <IfModule mod_negotiation.c>
           -#
           -# LanguagePriority allows you to give precedence to some languages
           -# in case of a tie during content negotiation.
           -#
           -# Just list the languages in decreasing order of preference. We have
           -# more or less alphabetized them here. You probably want to change this.
           -#
           -LanguagePriority en ca cs da de el eo es et fr he hr it ja ko ltz nl nn no pl pt pt-BR ru sv tr zh-CN zh-TW
           +  #
           +  # LanguagePriority allows you to give precedence to some languages
           +  # in case of a tie during content negotiation.
           +  #
           +  # Just list the languages in decreasing order of preference. We have
           +  # more or less alphabetized them here. You probably want to change this.
           +  #
           +  LanguagePriority en ca cs da de el eo es et fr he hr it ja ko ltz nl nn no pl pt pt-BR ru sv tr zh-CN zh-TW
            
           -#
           -# ForceLanguagePriority allows you to serve a result page rather than
           -# MULTIPLE CHOICES (Prefer) [in case of a tie] or NOT ACCEPTABLE (Fallback)
           -# [in case no accepted languages matched the available variants]
           -#
           -ForceLanguagePriority Prefer Fallback
           -
           +  #
           +  # ForceLanguagePriority allows you to serve a result page rather than
           +  # MULTIPLE CHOICES (Prefer) [in case of a tie] or NOT ACCEPTABLE (Fallback)
           +  # [in case no accepted languages matched the available variants]
           +  #
           +  ForceLanguagePriority Prefer Fallback
            </IfModule>
        (up to date)
         * execute[a2enmod negotiation] action run (skipped due to not_if)
       Recipe: apache2::mod_setenvif
         * template[/etc/apache2/mods-available/setenvif.conf] action create
           - update content in file /etc/apache2/mods-available/setenvif.conf from 1798c3 to fb5a27
           --- /etc/apache2/mods-available/setenvif.conf	2012-02-07 04:17:00.000000000 +0000
           +++ /tmp/chef-rendered-template20150424-1339-1etl4mb	2015-04-24 08:38:25.760621755 +0000
           @@ -1,31 +1,29 @@
            <IfModule mod_setenvif.c>
           +  #
           +  # The following directives modify normal HTTP response behavior to
           +  # handle known problems with browser implementations.
           +  #
           +  BrowserMatch "Mozilla/2" nokeepalive
           +  BrowserMatch "MSIE 4\.0b2;" nokeepalive downgrade-1.0 force-response-1.0
           +  BrowserMatch "RealPlayer 4\.0" force-response-1.0
           +  BrowserMatch "Java/1\.0" force-response-1.0
           +  BrowserMatch "JDK/1\.0" force-response-1.0
            
           -#
           -# The following directives modify normal HTTP response behavior to
           -# handle known problems with browser implementations.
           -#
           -BrowserMatch "Mozilla/2" nokeepalive
           -BrowserMatch "MSIE 4\.0b2;" nokeepalive downgrade-1.0 force-response-1.0
           -BrowserMatch "RealPlayer 4\.0" force-response-1.0
           -BrowserMatch "Java/1\.0" force-response-1.0
           -BrowserMatch "JDK/1\.0" force-response-1.0
           -
           -#
           -# The following directive disables redirects on non-GET requests for
           -# a directory that does not include the trailing slash.  This fixes a 
       
           -# redirects for folders with DAV methods.
           -# Same deal with Apple's DAV filesystem and Gnome VFS support for DAV.
           -#
           -BrowserMatch "Microsoft Data Access Internet Publishing Provider" redirect-carefully
           -BrowserMatch "MS FrontPage" redirect-carefully
           -BrowserMatch "^WebDrive" redirect-carefully
       -BrowserMatch "^WebDAVFS/1.[012]" redirect-carefully
           -BrowserMatch "^gnome-vfs/1.0" redirect-carefully
           -BrowserMatch "^gvfs/1" redirect-carefully
           -BrowserMatch "^XML Spy" redirect-carefully
       
           -BrowserMatch " Konqueror/4" redirect-carefully
           -
       +  #
           +  # The following directive disables redirects on non-GET requests for
           +  # a directory that does not include the trailing slash.  This fixes a
           +  # problem with Microsoft WebFolders which does not appropriately handle
           +  # redirects for folders with DAV methods.
           +  # Same deal with Apple's DAV filesystem and Gnome VFS support for DAV.
           +  #
           +  BrowserMatch "Microsoft Data Access Internet Publishing Provider" redirect-carefully
           +  BrowserMatch "MS FrontPage" redirect-carefully
       +  BrowserMatch "^WebDrive" redirect-carefully
       
           +  BrowserMatch "^gnome-vfs/1.0" redirect-carefully
           +  BrowserMatch "^gvfs/1" redirect-carefully
           +  BrowserMatch "^XML Spy" redirect-carefully
           +  BrowserMatch "^Dreamweaver-WebDAV-SCM1" redirect-carefully
       
            </IfModule>
         * file[/etc/apache2/mods-available/setenvif.load] action create (up to date)
         * execute[a2enmod setenvif] action run (skipped due to not_if)
       Recipe: apache2::mod_rewrite
         * file[/etc/apache2/mods-available/rewrite.load] action create (up to date)
         * execute[a2enmod rewrite] action run
           - execute /usr/sbin/a2enmod rewrite
       Recipe: apache2::mod_deflate
         * template[/etc/apache2/mods-available/deflate.conf] action create
           - update content in file /etc/apache2/mods-available/deflate.conf from 4f3582 to c8749f
           --- /etc/apache2/mods-available/deflate.conf	2012-02-07 04:16:59.000000000 +0000
           +++ /tmp/chef-rendered-template20150424-1339-1chcu62	2015-04-24 08:38:26.400613710 +0000
           @@ -1,10 +1,19 @@
            <IfModule mod_deflate.c>
           -          # these are known to be safe with MSIE 6
           -          AddOutputFilterByType DEFLATE text/html text/plain text/xml
           +  <IfModule mod_filter.c>
           +     # these are known to be safe with MSIE 6
           +     AddOutputFilterByType DEFLATE text/html text/plain text/xml
            
           -          # everything else may cause problems with MSIE 6
           -          AddOutputFilterByType DEFLATE text/css
           -          AddOutputFilterByType DEFLATE application/x-javascript application/javascript application/ecmascript
           -          AddOutputFilterByType DEFLATE application/rss+xml
           +     # everything else may cause problems with MSIE 6
           +     AddOutputFilterByType DEFLATE text/css
           +     AddOutputFilterByType DEFLATE application/x-javascript application/javascript application/ecmascript
           +     AddOutputFilterByType DEFLATE application/rss+xml
           +     AddOutputFilterByType DEFLATE application/xml
           +     AddOutputFilterByType DEFLATE application/xhtml+xml
           +     AddOutputFilterByType DEFLATE image/svg+xml
           +     AddOutputFilterByType DEFLATE application/atom_xml
           +     AddOutputFilterByType DEFLATE application/x-httpd-php
           +     AddOutputFilterByType DEFLATE application/x-httpd-fastphp
           +     AddOutputFilterByType DEFLATE application/x-httpd-eruby
           +  </IfModule>
            </IfModule>
         * file[/etc/apache2/mods-available/deflate.load] action create (up to date)
         * execute[a2enmod deflate] action run (skipped due to not_if)
       Recipe: apache2::mod_headers
         * file[/etc/apache2/mods-available/headers.load] action create (up to date)
         * execute[a2enmod headers] action run
           - execute /usr/sbin/a2enmod headers
       Recipe: apache2::default
         * template[/etc/apache2/sites-available/default.conf] action create
           - create new file /etc/apache2/sites-available/default.conf
           - update content in file /etc/apache2/sites-available/default.conf from none to 73a103
           --- /etc/apache2/sites-available/default.conf	2015-04-24 08:38:27.448600536 +0000
           +++ /tmp/chef-rendered-template20150424-1339-kgaqy7	2015-04-24 08:38:27.444600587 +0000
           @@ -1 +1,44 @@
           +<VirtualHost *:80>
           +  ServerAdmin ops@example.com
           +
           +  DocumentRoot /var/www/
           +  <Directory />
           +    Options FollowSymLinks
           +    AllowOverride None
           +  </Directory>
           +
           +  <Directory /var/www/>
           +    Options Indexes FollowSymLinks MultiViews
           +    AllowOverride None
           +    Order allow,deny
           +    Allow from all
           +  </Directory>
           +
           +  ScriptAlias /cgi-bin/ /usr/lib/cgi-bin/
           +  <Directory "/usr/lib/cgi-bin">
       
           +    Options +ExecCGI -MultiViews +SymLinksIfOwnerMatch
           +    Order allow,deny
           +    Allow from all
           +  </Directory>
           +
           +  ErrorLog /var/log/apache2/error.log
           +
           +  # Possible values include: debug, info, notice, warn, error, crit,
           +  # alert, emerg.
           +  LogLevel warn
           +
           +  CustomLog /var/log/apache2/access.log combined
           +  ServerSignature On
           +
           +  Alias /doc/ "/usr/share/doc/"
           +  <Directory "/usr/share/doc/">
           +    Options Indexes MultiViews FollowSymLinks
           +    AllowOverride None
           +    Order deny,allow
           +    Deny from all
           +    Allow from 127.0.0.0/255.0.0.0 ::1/128
           +  </Directory>
           +
           +</VirtualHost>
           - change mode from '' to '0644'
           - change owner from '' to 'root'
           - change group from '' to 'root'
         * execute[a2dissite default.conf] action run (skipped due to only_if)
         * execute[a2dissite 000-default.conf] action run (skipped due to only_if)
         * service[apache2] action enable (up to date)
         * service[apache2] action start (up to date)
         * service[apache2] action reload
           - reload service service[apache2]
       
       Running handlers:
       Running handlers complete
       Chef Client finished, 37/67 resources updated in 97.133546013 seconds
       Finished converging <default-precise32> (3m49.91s).
-----> Setting up <default-precise32>...
       Fetching: thor-0.19.0.gemFetching: thor-0.19.0.gem ( 18%)Fetching: thor-0.19.0.gem ( 36%)Fetching: thor-0.19.0.gem ( 54%)Fetching: thor-0.19.0.gem ( 72%)Fetching: thor-0.19.0.gem ( 89%)Fetching: thor-0.19.0.gem (100%)Fetching: thor-0.19.0.gem (100%)
       Successfully installed thor-0.19.0
       Fetching: busser-0.7.1.gemFetching: busser-0.7.1.gem ( 66%)Fetching: busser-0.7.1.gem (100%)Fetching: busser-0.7.1.gem (100%)
       Successfully installed busser-0.7.1
       2 gems installed
-----> Setting up Busser
       Creating BUSSER_ROOT in /tmp/busser
       Creating busser binstub
       Plugin bats installed (version 0.3.0)
-----> Running postinstall for bats plugin
       Installed Bats to /tmp/busser/vendor/bats/bin/bats
       Finished setting up <default-precise32> (0m23.63s).
-----> Verifying <default-precise32>...
       Suite path directory /tmp/busser/suites does not exist, skipping.
       Uploading /tmp/busser/suites/bats/apache_test.bats (mode=0644)
       Uploading /tmp/busser/suites/bats/apache_test.bats~ (mode=0644)
-----> Running bats test suite
       [1G   apache binary is found in PATH[K[77G1/3[2G[1G ✓ apache binary is found in PATH[K
       [0m[1G   apache config is valid[K[77G2/3[2G[1G ✓ apache config is valid[K
       [0m[1G   apache is running[K[77G3/3[2G[1G ✓ apache is running[K
       [0m
       3 tests, 0 failures
       Finished verifying <default-precise32> (0m10.47s).
-----> Destroying <default-precise32>...
       Vagrant instance <default-precise32> destroyed.
       Finished destroying <default-precise32> (0m3.85s).
       Finished testing <default-precise32> (6m0.89s).
-----> Kitchen is finished. (6m1.35s)
